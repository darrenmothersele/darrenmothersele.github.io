<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
                <title>Darren Mothersele - DevOps</title>
                <description>Posts categorized as 'DevOps'</description>
                <link>http://www.darrenmothersele.com</link>
                <atom:link href="http://www.darrenmothersele.com/devops/rss.xml" rel="self" type="application/rss+xml" />
                
                        <item>
                                <title>Heartbleed</title>
                                <description>&lt;p&gt;A &lt;a href=&quot;http://heartbleed.com/&quot;&gt;serious bug in OpenSSL&lt;/a&gt; was disclosed last night.
I just happened to check
&lt;a href=&quot;https://news.ycombinator.com/item?id=7548991&quot;&gt;Hacker News&lt;/a&gt; late last night,
about 2 hours after it had been posted.&lt;/p&gt;

&lt;p&gt;Luckily, by this time Ubuntu had released updated packages for OpenSSL, and
as most of the servers under my control are running Ubuntu Server, I could
easily patch them to remove the vulnerability. The fix for RedHad seemed to
take a little bit longer to arrive, but it&amp;#39;s
&lt;a href=&quot;https://access.redhat.com/site/solutions/781793&quot;&gt;here now&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Patching the vulnerability is just the first step, there&amp;#39;s a lot more work to
do to recover from this bug...&lt;/p&gt;

&lt;!--break--&gt;

&lt;h3&gt;Check OpenSSL version&lt;/h3&gt;

&lt;p&gt;You need to be running &lt;strong&gt;OpenSSL 1.0.1g&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;openssl version
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Just running this command doesn&amp;#39;t report back full version information.
If you check &lt;a href=&quot;http://serverfault.com/questions/587324/heartbleed-how-to-reliably-and-portably-check-the-openssl-version&quot;&gt;this post&lt;/a&gt; you will find further information on what to look for.&lt;/p&gt;

&lt;p&gt;If you are on Ubuntu 12.04 the package you are looking for is this one:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;openssl 1.0.1-4ubuntu5.12
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;h3&gt;Further recovery...&lt;/h3&gt;

&lt;p&gt;But, patching OpenSSL is only a small part of the fix for this bug.
The consequences of this are much deeper.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Heartbleed bug allows anyone on the Internet to read the memory of
the systems protected by the vulnerable versions of the OpenSSL software.
- &lt;a href=&quot;http://heartbleed.com/&quot;&gt;Heartbleed&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This essentially means that encryption keys, user credentials, and any
content handled by the servers could have been exposed. So the following
steps are required (see &lt;a href=&quot;http://security.stackexchange.com/questions/55075/does-heartbleed-mean-new-certificates-for-every-ssl-server&quot;&gt;this post&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Revocation of the old keypairs that were just superseded&lt;/li&gt;
&lt;li&gt;Changing all passwords&lt;/li&gt;
&lt;li&gt;Invalidating all session keys and cookies&lt;/li&gt;
&lt;li&gt;Evaluating the actual content handled by the vulnerable servers that could have been leaked, and reacting accordingly.&lt;/li&gt;
&lt;li&gt;Evaluating any other information that could have been revealed, like memory addresses and security measures&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Leaves no trace...&lt;/h3&gt;

&lt;p&gt;It&amp;#39;s also worth noting that exploiting the vulnerability leaves no trace, so
there is no way to know if your system, encryption keys, passwords or content
has been compromised.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s worth doing a general password reset anyway.&lt;/p&gt;

&lt;p&gt;Final note, it&amp;#39;s worth pointing out that this doesn&amp;#39;t affect OpenSSH, just OpenSSL,
as OpenSSH doesn&amp;#39;t include the broken TLS implementation.&lt;/p&gt;
</description>
                                <pubDate>Tue, 08 Apr 2014 00:00:00 +0100</pubDate>
                                <link>http://www.darrenmothersele.com//blog/2014/04/08/heartbleed/</link>
                                <guid isPermaLink="true">http://www.darrenmothersele.com//blog/2014/04/08/heartbleed/</guid>
                        </item>
                
                        <item>
                                <title>Drupal Devministration</title>
                                <description>&lt;p&gt;Here are the slides from the presentation I gave last night at the Drupal
Show and Tell event in London. Apologies for the background as came out a
bit weird after I converted to PDF and uploaded to slideshare.&lt;/p&gt;

&lt;!--break--&gt;

&lt;iframe width=&quot;476&quot; scrolling=&quot;no&quot; height=&quot;400&quot; frameborder=&quot;0&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; src=&quot;http://www.slideshare.net/slideshow/embed_code/24415658&quot;&gt;&lt;/iframe&gt;
</description>
                                <pubDate>Fri, 19 Jul 2013 00:00:00 +0100</pubDate>
                                <link>http://www.darrenmothersele.com//blog/2013/07/19/devministration/</link>
                                <guid isPermaLink="true">http://www.darrenmothersele.com//blog/2013/07/19/devministration/</guid>
                        </item>
                
                        <item>
                                <title>Testing Drupal 8 dev with Nginx, PHP-FPM and MariaDB using Vagrant</title>
                                <description>&lt;p&gt;My preferred setup for running Drupal sites uses Nginx, PHP-FPM and MariaDB. After reading a few posts about issues with Drupal 8 in this setup, I decided to quickly test it using Vagrant. I managed to get a development version of Drupal 8 up and running in approximately 30 mins in which I tried various things to get it working. Here are the steps that worked.
&lt;/p&gt;&lt;!--break--&gt;&lt;p&gt; This is not a complete guide to hosting Drupal 8 on Nginx using PHP-FPM and there&#39;s a lot of tweaking needed, so here I just use default configurations wherever possible for simplicity. I plan to share more advanced configurations in a future post, like the configurations I&#39;m using with &lt;a href=&quot;http://www.apiarycloud.com&quot;&gt;Apiary&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;First make sure you&#39;ve got &lt;a href=&quot;http://docs.vagrantup.com/v2/installation/index.html&quot;&gt;Vagrant installed&lt;/a&gt;, create a new folder, and initialize a new Vagrant box:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;codeblock&quot;&gt;&lt;code&gt;vagrant init precise32&lt;/code&gt;&lt;/div&gt;
&lt;p&gt;Edit the Vagrantfile to add a port map for port 80, so your Vagrantfile looks like this:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;codeblock&quot;&gt;&lt;code&gt;Vagrant.configure(&quot;2&quot;) do |config|&lt;br&gt;&amp;nbsp; config.vm.box = &quot;precise32&quot;&lt;br&gt;&amp;nbsp; config.vm.network :forwarded_port, guest: 80, host: 4567&lt;br&gt;end&lt;/code&gt;&lt;/div&gt;
&lt;p&gt;I then &lt;code&gt;vagrant ssh&lt;/code&gt; into the box and do an &lt;code&gt;apt-get update&lt;/code&gt; and &lt;code&gt;apt-get upgrade&lt;/code&gt;. I then setup Aptitude sources to enable installation of MariaDB. &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;codeblock&quot;&gt;&lt;code&gt;sudo apt-get install python-software-properties&lt;br&gt;sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xcbcb082a1bb943db&lt;br&gt;sudo add-apt-repository &#39;deb http://mirror.stshosting.co.uk/mariadb/repo/5.5/ubuntu precise main&#39;&lt;br&gt;sudo apt-get update&lt;/code&gt;&lt;/div&gt;
&lt;p&gt;And then install all the required packages:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;codeblock&quot;&gt;&lt;code&gt;sudo apt-get install mariadb-server nginx-extras php5-fpm php-pear php5-cli php5-gd php5-curl php5-common php5-mysql php-apc php-console-table &lt;/code&gt;&lt;/div&gt;
&lt;p&gt;This installs MariaDB, Nginx, PHP-FPM and some required PHP packages, and PHP console table that&#39;s required by Drush.&lt;/p&gt;
&lt;p&gt;You could start the nginx service now with
&lt;code&gt;sudo service nginx start&lt;/code&gt; and you would see the &quot;Welcome to nginx!&quot; page if you go to http://localhost:4567/ in your browser.&lt;/p&gt;
&lt;p&gt;In order to use Drush with Drupal 8 you need to install Drush version 6. This can be done by specifying the version explicitly when installing with pear:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;codeblock&quot;&gt;&lt;code&gt;sudo pear channel-discover pear.drush.org&lt;br&gt;sudo pear install drush/drush-6.0.0&lt;/code&gt;&lt;/div&gt;
&lt;p&gt;I downloaded Drupal to the /vagrant folder using Drush. I then later found issues with file permissions over the folder shared with the host machine from within Vagrant so I symlinked the sites folder to /home/vagrant and changed the owner to www-data. I also found issues running Drush as the vagrant user, so I use sudo to run it as if it was www-data. &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;codeblock&quot;&gt;&lt;code&gt;drush dl --select --all drupal-8&lt;/code&gt;&lt;/div&gt;
&lt;p&gt;With that command you can then select to download either the Drupal 8 dev version, or the latest alpha (at time of writing alpha2). &lt;/p&gt;
&lt;p&gt;I then create a database for Drupal to use by using the Mysql client&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;codeblock&quot;&gt;&lt;code&gt;mysql -uroot -p&lt;/code&gt;&lt;/div&gt;
&lt;p&gt;And entering these SQL commands:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;codeblock&quot;&gt;&lt;code&gt;CREATE DATABASE drupal8;&lt;br&gt;GRANT ALL PRIVILEGES ON drupal8.* TO drupal@localhost IDENTIFIED BY &#39;password&#39;;&lt;/code&gt;&lt;/div&gt;
&lt;p&gt;Then change directory into the Drupal folder and run the Drush site installer as www-data user:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;codeblock&quot;&gt;&lt;code&gt;sudo -u www-data drush si --db-url=mysql://drupal:password@localhost/drupal8 &lt;/code&gt;&lt;/div&gt;
&lt;p&gt;In this test I&#39;m just using the default configurations. So start PHP-FPM and it will be available on 127.0.0.1:9000 &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;codeblock&quot;&gt;&lt;code&gt;sudo service php5-fpm start&lt;/code&gt;&lt;/div&gt;
&lt;p&gt;I remove the default nginx site:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;codeblock&quot;&gt;&lt;code&gt;sudo unlink /etc/nginx/sites-enabled/default&lt;/code&gt;&lt;/div&gt;
&lt;p&gt;And then create a new configuration using the values from the &lt;a href=&quot;http://wiki.nginx.org/Drupal&quot;&gt;Nginx wiki&lt;/a&gt;. This is not the production nginx configuration I am using, as I use Puppet modules that I created based on &lt;a href=&quot;https://github.com/perusio/drupal-with-nginx&quot;&gt;Perusio&#39;s nginx configuration&lt;/a&gt;, but for this test I just wanted the basics. Copy this code into  &lt;code&gt;/etc/nginx/sites-available/drupal8&lt;/code&gt; and then create a symlink to enable the site:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot;&gt;&lt;code&gt;sudo ln -s /etc/nginx/sites-available/drupal8 /etc/nginx/sites-enabled/drupal8 &lt;/code&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; You need to update the PHP socket information based on the default configuration provided by PHP-FPM otherwise you will get Gateway errors when you try to access the site. By default the nginx configuration above is using a unix socket, so change this to 127.0.0.1:9000 as specified in the default pool configuration for PHP-FPM.&lt;/p&gt;
&lt;p&gt;Now start (or restart) nginx to see the site working in the browser:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;codeblock&quot;&gt;&lt;code&gt;sudo service nginx restart&lt;/code&gt;&lt;/div&gt;
</description>
                                <pubDate>Mon, 08 Jul 2013 00:00:00 +0100</pubDate>
                                <link>http://www.darrenmothersele.com//blog/2013/07/08/testing-d8-nginx/</link>
                                <guid isPermaLink="true">http://www.darrenmothersele.com//blog/2013/07/08/testing-d8-nginx/</guid>
                        </item>
                
                        <item>
                                <title>The Twelve-Factor Drupal Web App</title>
                                <description>&lt;p&gt;Drupal is a good choice as a platform for building web apps thanks to devops advances that work around PHP&#39;s inadequacies as a modern programming language. Web app builders can benefit from the extensive ecosystem of Drupal modules, and the unrivalled community support, while still complying (almost) with the best practises for web apps set out in the Twelve Factor web app methodology.&lt;/p&gt;
&lt;!--break--&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Modern software is delivered as a service, via the web. Drupal is a CMS framework that can be used for building web apps, leveraging the extensive ecosystem of modules, and unrivaled community support. But, Drupal&#39;s disadvantage for app developers is that it is built on PHP, which lacks some of the features of modern programming languages, and some features of the Drupal architecture are hard to scale. &lt;/p&gt;
&lt;p&gt;You might argue that Drupal is designed for building websites, but I don&#39;t really see an important distinction between web app or website. Perhaps for a website the focus is more on content, and for a web app the focus is functionality? Whatever your thoughts on this, I believe the twelve factors still apply, so if you&#39;re that way inclined just substitute the word site for the word app in the rest of this article. &lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://www.12factor.net/&quot;&gt;Twelve-Factor App&lt;/a&gt; is a methodology for building software-as-a-service apps that offers solid advice for both web app developers and op engineers that deploy or manage web apps. It is based on the authors&#39; extensive experience is the development and deployment of apps via the &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt; platform. &lt;/p&gt;
&lt;p&gt;I suggest reading the original manifesto as I am not going to go into detail, nor repeat or explain each of the twelve factors. In this article I will present the advances in Drupal devops and practises I have been using that move us towards complying with each of the twelve factors. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I. Codebase&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There is one single code repository per app. There is no code in this repo that is shared. Any shared code should be refactored into separate modules that can be linked in using the dependency management. &lt;/p&gt;
&lt;p&gt;The implication of this is that your codebase repo does not include the Drupal codebase, it contains only the custom modules and themes that are used in your app. &lt;/p&gt;
&lt;p&gt;The solution to this is to develop each app as a separate &quot;install profile&quot; which contains a make file for the dependencies, and any custom modules or themes required by the app. You can read more about this approach in the article &lt;a href=&quot;http://walkah.net/blog/every-drupal-site-install-profile/&quot;&gt;Every Drupal Site is an Install Profile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;II. Dependencies&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;All dependencies of your app are defined in the Drush Make file.  This includes the Drupal Core version that the site is built on, and any contrib modules, themes, and your own shared libraries references via Git.&lt;/p&gt;
&lt;p&gt;Do not write any custom code (or use any contrib module) that relies implicitly on the existence of system-wide packages. All dependencies must be defined explicitly in the Drush Make file. &lt;/p&gt;
&lt;p&gt;I would suggest refactoring code that relied implicitly on a system-wide package into an external resource (see IV Backing Services) and explicitly define the library/module to connect to it as a dependency. For example, rather than writing transcoding code that refers to ffmpeg, you should create a Backing Service for performing the transcode operations. This not only removes the implicit dependency, but has the added advantage of giving you extra scaling options. &lt;/p&gt;
&lt;p&gt;To be truly twelve-factor you should use *dependency isolation* to ensure that no implicit dependencies &quot;leak in&quot; from the environment. Ruby and Python offer tools for this, but it&#39;s not usually possible in PHP. I don&#39;t have a fully worked out answer for this, but I am experimenting with defining system dependencies in a manifest, such as PHP version and required PHP extensions, and then via the magic of Nginx and PHPFPM allowing multiple process to use different PHP versions. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;III. Config&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This factor relates to the the configuration that varies between deployments. This is a function of the environment in which the build runs so the config should come from the environment. &lt;/p&gt;
&lt;p&gt;You can see an example of how to do this by looking at Aegir where Drupal uses a settings.php file in which the app config is set by reading from environment variables. These variables are set in the server vhost configuration for the deployment. This means you can have separate settings (e.g. Database settings) for dev, staging and production. &lt;/p&gt;
&lt;p&gt;You should be able to set any Drupal variable by setting values in the $conf array in settings.php and reading the values from the environment. Some configuration is not stored in variables, but in (ctools) exportable objects in the database in this case you need some bridging code to set the configuration values in the exportable objects saved in code. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IV. Backing Services&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Every Drupal app will have at least a database, an usually other &quot;resources&quot; such as queueing systems, email sending, and caches. Each distinct service is a resource, and there is a loose coupling. They can be swapped without code changes (just change settings).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;V. Build, Release, Run&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Twelve-factor approach to deployment has three phases. Build, release and run. This translates to Drupal as follows:&lt;/p&gt;
&lt;p&gt;1) Build - basically running Drush Make to download Drupal core and the dependencies as defined in your make file. &lt;/p&gt;
&lt;p&gt;2) Release - a scripted mechanism for combining the &quot;build&quot; with the correct config for the deploy into a &quot;release&quot;&lt;/p&gt;
&lt;p&gt;3) Run - the server processes are repointed to the new release. This could by as simple as changing the symlink for the Apache vhost record, but more likely involves a bit more complexity than this in the case you&#39;re running a more advanced nginx setup with multiple backend workers. &lt;/p&gt;
&lt;p&gt;A &quot;release&quot; (i.e. combination of build and config) js never changed. You can keep a folder of &quot;releases&quot; named by either an incrementing ID, or timestamp, that means you can, for example, simplify the task of rolling back by repointing the vhost directory to a different release folder. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;VI. Processes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In a more complex hosting environment (like the one I&#39;ve been implementing recently) you have multiple workers per site. This allows you to easily scale your app (up and down) as required. This allows for robustness as the site stays up if one worker dies, and performance as you balance the load across multiple workers. &lt;/p&gt;
&lt;p&gt;In this kind of environment having stateless processes is essential, but this is tricky to achieve with Drupal as you have to think about sessions and the &quot;files&quot; folder. We also have the problem that CSS and Javascript assets are compiled (aggregated) at run time, not at build time. &lt;/p&gt;
&lt;p&gt;To configure Drupal to comply with this factor you first have to be using a separate cache backend (e.g. Redis or Memcache) for sessions that can be shared by all the workers. You also need to think about storing the files folder where it can be shared among the workers. There are better solutions than NFS for this but perhaps that&#39;s a topic for later. Drupal has issues when working with NFS due the excessive use of include_once, &lt;a href=&quot;http://tag1consulting.com/blog/nfs-drupal-and-realpath-cache&quot;&gt;although increasing the realpath cache helps&lt;/a&gt;. Thanks to &lt;a href=&quot;https://twitter.com/iamreevo&quot;&gt;Paul Reeves&lt;/a&gt; for the heads up on this one. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;VII. Port binding&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This factor is harder to implement in PHP as it&#39;s not usual to link in a web server library and run in &quot;user space&quot; as part of the process. The usual approach in PHP is to run as a module inside Apache or another web server daemon. &lt;/p&gt;
&lt;p&gt;As a compromise I have started working with nginx and PHP-FPM. This setup gives me much more flexibility as to how to configure the system for multiple workers. &lt;/p&gt;
&lt;p&gt;There is a project on GitHub called &lt;a href=&quot;https://github.com/rdconseil/phttpd&quot;&gt;phttpd&lt;/a&gt; that promises to embed nginx and php-fpm into an isolated install to allow it to run in userspace. I&#39;ve not looked at this yet, but it&#39;s could be interesting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;VIII. Concurrency&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The twelve-factor app suggests architecting the app by assigning work to a process type, so having HTTP requests handled by a &quot;web process&quot; and having background tasks handled by &quot;worker&quot; processes. &lt;/p&gt;
&lt;p&gt;I had success with this on the MTV project I was involved in recently, where certain administration or editorial tasks would be queued for execution rather than attempted straight away by using the Drupal Queue system. The queue items are sent to a queue (use an external system like beanstalkd) and then executed by separate background &quot;queue-runner&quot; processes. &lt;/p&gt;
&lt;p&gt;By offloading tasks for asynchronous processing and using separate workers this gives two dimensions for how you can scale your app. You can scale up by adding more process of each type, or you can scale out by increasing workload diversity amongst more worker types. Having more worker types means you can scale up just the type of work that needs to be scaled, while staying lean on process that don&#39;t need it. &lt;/p&gt;
&lt;p&gt;The twelve-factor app warns that processes should never daemonize themselves. If you&#39;ve tried demonising PHP you&#39;ll know this can be tricky. To comply with this factor I think it is possible using something like supervisord and rely on the operating system process manager. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IX. Disposability&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the context of a Drupal app, this factor relates to having multiple workers that can be stopped and started on demand easily. This means keeping HTTP requests times short (helped by the actions taken in #VIII Concurrency). &lt;/p&gt;
&lt;p&gt;In the case of background worker tasks (for example, queue runners) they should return any unprocessed items back to the Drupal Queue before shutting down. The web server container should stop accepting requests and shutdown when it&#39;s finished serving active requests - which should be quick because you&#39;ve kept HTTP request times down, right? &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;X. Dev/prod parity&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In order to comply with this factor we need to address the three areas where gaps between dev and production occur. &lt;/p&gt;
&lt;p&gt;The time gap between when a developer commits a change and it is deployed should be as small as possible. If you&#39;ve got the build/release/run process working well, and done as much as you can to remove other sources of friction in the process (e.g. by doing automated testing), then you&#39;re on your way with this one. &lt;/p&gt;
&lt;p&gt;Reducing the personnel gap in Drupal means empowering developers with tools to get involved in deployments, and monitoring the app in production. &lt;/p&gt;
&lt;p&gt;And to address the parity between the tools used in production and dev, basically, you need to be using Vagrant. If you&#39;re not then you&#39;re doing it wrong. It&#39;s not hard to find information on using Vagrant for Drupal development, but you will have to do some work to get the repeatable config that matches your production environment. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;XI. Logs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Drupal watchdog is an essential debugging tool for any Drupal dev, plus in production it provides essential information on the operation, health, and performance of the app, and useful information for auditing. &lt;/p&gt;
&lt;p&gt;There are flexible options for logging in Drupal 7 including the built in watchdog database log, but I would urge that you disable this and use a separate central repository for all logs. The monolog module for Drupal will allow you to send logs anywhere, for example a GrayLog2 server or Splunk, but a better solution is to log to the system logs using the syslog module in Drupal core and use a log router to centralise your logging. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;XII. Admin processes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Drush provides a REPL shell for Drupal, and it&#39;s fairly straightforward to create drush commands for admin tasks and deploy them with your codebase as part of a release. Running database updates from modules and core should be done via the Drush update command against a deployed release using a worker, and against a test release first before altering the production DB.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I hope in posting this comparison between advances in Drupal devops and the manifesto of the Twelve-Factor App, I might have at least raised awareness of the importance of devops in the Drupal community a little (for anyone who&#39;s not already aware!).&lt;/p&gt;
&lt;p&gt;Drupal is awesomely powerful, it&#39;s fun to work with, and we can work around the disadvantages with great tools and practises. It is possible to build modern web apps and scale them in the cloud with maximum portability, maximum agility, and minimise the effects of software erosion. &lt;/p&gt;

</description>
                                <pubDate>Wed, 29 May 2013 00:00:00 +0100</pubDate>
                                <link>http://www.darrenmothersele.com//blog/2013/05/29/twelve-factor-drupal/</link>
                                <guid isPermaLink="true">http://www.darrenmothersele.com//blog/2013/05/29/twelve-factor-drupal/</guid>
                        </item>
                
                        <item>
                                <title>A couple of simple Aegir add-ons</title>
                                <description>&lt;p&gt;I&#39;m using an Aegir based hosting system for Drupal sites, and I&#39;ve needed to do a couple of configuration tasks on certain sites. Rather than just hack the configuration generated by Aegir, or hard code this in (and have to do the same each time I need it), I have put this in two simple modules. The first allows you to specify IP address that can access the site, the second applies some simple htaccess rules to harden up security. Get them from my GitHub, or read on for more details...&lt;/p&gt;
&lt;!--break--&gt;
&lt;h3&gt;&lt;a href=&quot;https://github.com/darrenmothersele/hosting_firewall&quot;&gt;Simple Hosting Firewall&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is good for staging sites where you just want to restrict access to just developers, or clients who will approve the changes before they are pushed to the (live) production site. It means you dont have to expose your staging sites to the world.&lt;/p&gt;
&lt;p&gt;It works by adding Apache conf rules to restrict by IP address. If you don&#39;t provide IP addresses then the whole world can see your site. If you provide a list of IP address then only clients with those IP addresses can access the site.  Grab the code &lt;a href=&quot;https://github.com/darrenmothersele/hosting_firewall&quot;&gt;from my GitHub account&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;NB: If you are using a reverse proxy cache, such as Varnish, in front of Drupal. Then you will need to have mod_rpaf installed in order for the correct IP address to be reported to Apache. On Ubuntu server you can install that mod like this:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;codeblock&quot;&gt;&lt;code&gt;sudo apt-get install libapache2-mod-rpaf&lt;/code&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a href=&quot;https://github.com/darrenmothersele/aegir_secure_mods&quot;&gt;Aegir Secure Mods&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This module adds some simple htaccess rewrite rules to harden up security a little. At the moment it just blocks access to the files left over from the Drupal installation process that are not required for a production site. &lt;/p&gt;
&lt;p&gt;This module came about after a security agency performed penetration testing on a client&#39;s website and recommended that these files were removed. I decided, rather than remove them, to just rewrite them to a 404 error - making them look like they never existed! I prefer this approach because I&#39;m building platforms from Drush make files and I don&#39;t want to keep removing the files each time, or have to roll a patch to remove them. &lt;/p&gt;
&lt;p&gt;This module provides a simple checkbox on sites within Aegir to turn on the blocking of install files.  Grab the code from my &lt;a href=&quot;https://github.com/darrenmothersele/aegir_secure_mods&quot;&gt;GitHub account&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;Both modules need installing in your Aegir site same way you install any Drupal module. I recommend putting them in your aegir sites folder, (not the sites/all), so that when you upgrade Aegir using apt-get the modules are taken along with the site. &lt;/p&gt;
&lt;p&gt;You also need to copy the provision script into your .drush folder, so that the Aegir backend can find it.&lt;/p&gt;
</description>
                                <pubDate>Sat, 19 May 2012 00:00:00 +0100</pubDate>
                                <link>http://www.darrenmothersele.com//blog/2012/05/19/two-simple-aegir-add-ons/</link>
                                <guid isPermaLink="true">http://www.darrenmothersele.com//blog/2012/05/19/two-simple-aegir-add-ons/</guid>
                        </item>
                
                        <item>
                                <title>8 Drupal Admin Tasks to Complete Before Putting Your Site Live</title>
                                <description>&lt;p&gt;There are loads of configuration options in Drupal core, and no doubt you&#39;ll have modules installed that add loads more options. Here&#39;s a mixture of configuration and admin tasks that you should make sure are completed before putting your Drupal website live. From caching and CSS aggregation to improve the performance of the site, to SEO tweaks to your htaccess and robots.txt files...&lt;/p&gt;

&lt;!--break--&gt;
&lt;p&gt;&lt;strong&gt;1. Turn on Caching&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use as much caching as you can get away with. There&#39;s no point wasting server power recreating blocks for every visitor. Turn on caching and have them stored and reused. Many modules like views and panels come with their own cache options, and the main performance options are available under &quot;Site Configuration&quot; -&amp;gt; &quot;Performance&quot;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Aggregate CSS and Javascript&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Turn on this option in your performance settings and Drupal will combine all CSS files into one css file, and all Javascript files into one cacheable js file. This reduces the number of required HTTP requests to download each page, and is a nice big lump of data that the user can cache in their browser as they explore the website.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Make errors only report to logs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Make sure that your error reporting is setup so that any messages are logged in the database and not shown on screen. You don&#39;t want to bamboozle your visitors should something go wrong, and there&#39;s always a chance the error message reveals some information about your server configuration that might be exploitable by some hacker or spammer. These options are under &quot;Site Configuration&quot; -&amp;gt; &quot;Error Reporting&quot;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Give your permissions a once over&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Have a double check down your permissions list to sanity check your configuration. Make sure you&#39;ve not accidentally given registered users more permissions that you meant to, and check that user roles that do need permissions have them. For example, you need to turn on permission for anonymous visitors to access the site wide contact form. You may also want to check the configuration of any node access modules you are using, especially if certain parts of the site are meant to be restricted to unregistered users.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Make sure CRON is running.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Make sure that your server is successfully calling the cron system&lt;br /&gt;
so you can be sure that any routine tasks get taken care of. This would also be a good time (while you&#39;re messing around in cron settings) to set up your automated rsync and mysqldump backups. There&#39;s more information on setting up cron &lt;a href=&quot;http://drupal.org/cron&quot;&gt;here&lt;/a&gt;, and I wrote something previously about &lt;a href=&quot;/blog/2008/07/25/easy-drupal-backup-with-rsync-and-mysqldump/&quot;&gt;Drupal backups&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. Check file permissions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you&#39;re using modules that manipulate files, such as imagecache, upload, or any of the filefield modules, then make sure that you have permissions set correctly on the folders on the server. If not then users will have trouble uploading files, such as avatar images or attachments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. Check htaccess&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Check that .htaccess is working and restricting access to any parts of the server you don&#39;t want people accessing directly. The Drupal htaccess file by default restricts direct access to folders, modules, and info files. If apache is not configured correctly the htaccess file may be ignored.&lt;/p&gt;
&lt;p&gt;While you&#39;re in htaccess have a look at the redirects section. If your site is accessible by www.example.com as well as example.com (without the www) then you should pick one of them and forward all requests from the other to the main url. The configuration to do this is already in the htaccess file, you just need to adapt it to your URL. This prevents your site being published on two locations which could otherwise be problematic for search engines like Google that have a duplicate content penalty.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8. Tweak the robots.txt&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can tell Search engines to leave bits of your site out of their indexes. This is useful again for duplicate content, especially if you are using Path aliases. By default all your content is available via it&#39;s node address, eg &quot;node/1&quot; and it&#39;s alias address which could be anything set by you or pathauto. You simple add     &quot;Disallow: /node/&quot; to the robots.txt file. &lt;a href=&quot;http://blamcast.net/articles/drupal-seo&quot;&gt;This page&lt;/a&gt; on blamcast has more information on this.&lt;/p&gt;
</description>
                                <pubDate>Fri, 21 Nov 2008 00:00:00 +0000</pubDate>
                                <link>http://www.darrenmothersele.com//blog/2008/11/21/8-drupal-admin-tasks-complete-putting-your-site-live/</link>
                                <guid isPermaLink="true">http://www.darrenmothersele.com//blog/2008/11/21/8-drupal-admin-tasks-complete-putting-your-site-live/</guid>
                        </item>
                
        </channel>
</rss>
