<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Darren Mothersele</title>
    <description>Software developer who builds simple, creative, and independent technology. He believes this will empower humans to create a better future.
</description>
    <link>http://www.darrenmothersele.com/</link>
    <atom:link href="http://www.darrenmothersele.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 29 Mar 2017 08:36:39 +0100</pubDate>
    <lastBuildDate>Wed, 29 Mar 2017 08:36:39 +0100</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>How to do Everything with PHP Middleware (DrupalCamp London)</title>
        <description>&lt;p&gt;At the DrupalCamp in London earlier this month I gave a talk 
about PHP Middleware. 
You can see a &lt;a href=&quot;https://www.youtube.com/watch?v=I0pXXCQdHQM&quot;&gt;recording of the talk&lt;/a&gt; 
on YouTube. Here’s a summary, in case you don’t want to watch 
the whole talk, or the distorted audio upsets you, or if you 
want the links and references:&lt;/p&gt;

&lt;h2 id=&quot;simple-vs-easy&quot;&gt;Simple vs Easy&lt;/h2&gt;

&lt;p&gt;I started with a reference to the important talk by Rich Hickey, 
&lt;a href=&quot;https://www.infoq.com/presentations/Simple-Made-Easy&quot;&gt;Simple Made Easy&lt;/a&gt;.
This is high up on my list of videos every software developer needs to watch.
I began here because I think it’s important to identify the difference
between &lt;em&gt;simple&lt;/em&gt; and &lt;em&gt;easy&lt;/em&gt;, to identify where complexity sneaks into our 
systems. I have found PHP Middleware to be an important tool in 
the fight against complexity.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“programming, when stripped of all its circumstantial irrelevancies, boils 
down to no more and no less than very effective thinking so as to avoid 
unmastered complexity, to very vigorous separation of your many different concerns.&lt;/p&gt;

  &lt;p&gt;– &lt;a href=&quot;https://www.cs.utexas.edu/users/EWD/transcriptions/EWD05xx/EWD512.html&quot;&gt;Edsgar W. Dijkstra&lt;/a&gt; (1930 - 2002)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;de-complecting-php&quot;&gt;De-complecting PHP&lt;/h2&gt;

&lt;p&gt;I talked a bit about different ways to simplify development with PHP.
Including: Domain-driven design, Hexagonal architecture (Ports and 
Adapters), Framework-independent code, Thin APIs, etc…
In particular, I wanted to emphasise the importance of framework-independent
code and the benefit of using common interfaces such as the ones developed
as PSRs by &lt;a href=&quot;http://www.php-fig.org/&quot;&gt;PHP-FIG&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There was some discussion after about introducing unecessary abstractions,
but I think this misses the point. Of course there is a trade off, but the
key is to focus on the simplicity, on &lt;em&gt;untwisting&lt;/em&gt; things (c.f. Rich Hickey).&lt;/p&gt;

&lt;h2 id=&quot;de-coupled&quot;&gt;De-coupled&lt;/h2&gt;

&lt;p&gt;Inspired by the &lt;a href=&quot;https://docs.zendframework.com/zend-expressive/&quot;&gt;Zend Expressive&lt;/a&gt;
installation procedure, I imagined what Drupal 10 might look like, with 
fully-decoupled components.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.darrenmothersele.com/img/drupal-x-installer.jpg&quot; alt=&quot;Drupal Install&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;interfaces&quot;&gt;Interfaces&lt;/h2&gt;

&lt;p&gt;The widespread adoption of PSR7 by the PHP community has lead to the 
popularity of PHP Middleware-based systems.&lt;/p&gt;

&lt;p&gt;Why PSR7 when Symfony HTTP components were so popular?
Well, that is an implementation - and rather than standardise on 
implementation, we should standardise against interfaces.&lt;/p&gt;

&lt;p&gt;This allows more interoperability. I showed this &lt;strong&gt;pseudocode&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Take the incoming request from Diactoros
$request = ServerRequestFactory::fromGlobals();

$client = new Client();

// Response comes back from Guzzle
$response = $client-&amp;gt;send($request-&amp;gt;withUrl($dest));

$body  = simplexml_load_string(
$response-&amp;gt;getBody()-&amp;gt;getContents());

// pass back to Diactoros
(new SapiEmitter)-&amp;gt;emit($response-&amp;gt;withBody($body));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The example uses HTTP requests from 
&lt;a href=&quot;https://github.com/zendframework/zend-diactoros&quot;&gt;Zend Diactoros&lt;/a&gt;,
forwards them using the &lt;a href=&quot;http://guzzle.readthedocs.io/en/latest/&quot;&gt;Guzzle&lt;/a&gt;
HTTP client, and returns the response object from Guzzle
using the SAPI Emitter from Diactoros.&lt;/p&gt;

&lt;p&gt;This demonstrates the power of sharing standard interfaces.
Here two packages are used together, both provide
an implementation of PSR7 HTTP messages, and they
work seamlessly because they both conform to the same interface,
despite the differing implementation details.&lt;/p&gt;

&lt;h2 id=&quot;decorating-web-apps&quot;&gt;Decorating Web Apps&lt;/h2&gt;

&lt;p&gt;This is what a typical web app looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.darrenmothersele.com/img/ball-of-mud.jpg&quot; alt=&quot;Ball of Mud&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Which can be simplified to this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.darrenmothersele.com/img/web-app-1.png&quot; alt=&quot;Web App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A web app takes a request and returns a response.&lt;/p&gt;

&lt;p&gt;The concept behind PHP Middleware is that you can &lt;em&gt;decorate&lt;/em&gt;
the app, to add new functionality, by intercepting the request
on the way in, and the response on the way out.
This avoids the complexity of &lt;em&gt;intertwining&lt;/em&gt; your code
throughout the ball of mud.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.darrenmothersele.com/img/web-app-2.png&quot; alt=&quot;Web App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s an example (pseudocode) for adding CORS 
functionality to an existing app:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
$cors = analyze($request);
switch ($cors-&amp;gt;getRequestType()) {
    Case ERR_NO_HOST_HEADER:
    Case ERR_ORIGIN_NOT_ALLOWED:
    Case ERR_METHOD_NOT_SUPPORTED:
    Case ERR_HEADERS_NOT_SUPPORTED:
        Return createResponse(403);

    Case TYPE_REQUEST_OUT_OF_CORS_SCOPE:
        return $APP-&amp;gt;process($request);

    Case TYPE_PRE_FLIGHT_REQUEST:
        $response = Utils\Factory::createResponse(200);
        Return $response-&amp;gt;withHeaders($cors-&amp;gt;getHeaders);

    default:
        $response = $APP-&amp;gt;process($request);
        Return $response-&amp;gt;withHeaders($cors-&amp;gt;getHeaders);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://stackphp.com/&quot;&gt;StackPHP&lt;/a&gt; first popularised the concept of middleware
in PHP. This diagram is from their website:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.darrenmothersele.com/img/onion.png&quot; alt=&quot;Web App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are other popular micro-frameworks based on this concept,
such as &lt;a href=&quot;https://www.slimframework.com/&quot;&gt;Slim&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The core of your app is just a thin layer of business logic. 
Just your domain specific code. The rest can be wrapped in layers
which isolate and separate concerns nicely.&lt;/p&gt;

&lt;h2 id=&quot;single-pass-vs-double-pass&quot;&gt;Single-pass vs Double-pass&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;double pass&lt;/em&gt; approach became the most popularly used
signature for HTTP middleware, based on
&lt;a href=&quot;http://expressjs.com/en/guide/writing-middleware.html&quot;&gt;Express middleware&lt;/a&gt;
from the JS community.&lt;/p&gt;

&lt;p&gt;It looks like this:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// DOUBLE PASS
function __invoke($request, $response, $next) {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The request and the response are both passed into the middleware,
along with a &lt;code class=&quot;highlighter-rouge&quot;&gt;$next&lt;/code&gt; delegate that is called to pass
control and carry on processing down the chain of middleware.&lt;/p&gt;

&lt;p&gt;This double-pass approach is much newer, but 
used by most of the early adopters of PSR-7.&lt;/p&gt;

&lt;p&gt;A single pass approach, looks like this:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// SINGLE PASS / LAMBDA
function process($request, $delegate) {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The issue is with how the response object is dealt with.
In the double-pass approach, both are provided. 
The argument is that this is better for dependency 
inversion. Using the single pass approach you either
need to hard code a dependency on a HTTP message 
implementation into your middleware when the response
is required, or you need to inject a factory for
generating the response.&lt;/p&gt;

&lt;h2 id=&quot;psr-15-http-middleware&quot;&gt;PSR-15 HTTP Middleware&lt;/h2&gt;

&lt;p&gt;After the success of PSR7, with it’s wide adoption leading to
much standardisation and interoperability in PHP frameworks,
the next step is to standardise the middleware interface.&lt;/p&gt;

&lt;p&gt;This is not yet an accepted PSR. At the time of writing 
it is still in &lt;strong&gt;draft&lt;/strong&gt; status.
It is available for use in the 
&lt;a href=&quot;https://github.com/http-interop/http-middleware&quot;&gt;http-interop/http-middleware&lt;/a&gt; repo.&lt;/p&gt;

&lt;h2 id=&quot;invoker&quot;&gt;Invoker&lt;/h2&gt;

&lt;p&gt;As an aside, I mentioned the &lt;a href=&quot;https://github.com/PHP-DI/Invoker&quot;&gt;Invoker Interface&lt;/a&gt;.
As per the docs:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Who doesn’t need an over-engineered call_user_func()?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In particular this library really simplifies the process
of calling things and injecting dependencies. 
It also allows to call things using named parameters.
I make extensive use of this, and I find making calls with 
named parameters makes code much easier to understand.&lt;/p&gt;

&lt;h2 id=&quot;psr-15-interfaces&quot;&gt;PSR-15 Interfaces&lt;/h2&gt;

&lt;p&gt;PSR-15 has two interfaces. Both define a method called &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt;.
One is the signature that middleware must support, which takes
a PSR7 request and a PSR15 delegate. The other interface defines
the &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt; method for the delegate. The method on both
interfaces is defined as returning a PSR7 response.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.darrenmothersele.com/img/psr-15.png&quot; alt=&quot;Web App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So you can compose a chain of middleware, pass in a request
and get a response. The request is passed down the chain of 
middleware until a response is generated which is then passed
back up the chain, possibly being decorated along the way.&lt;/p&gt;

&lt;p&gt;For want of a better name, I refer to this chain of middleware
as a &lt;em&gt;stack&lt;/em&gt;. And, I have created a simple 
&lt;a href=&quot;https://github.com/ideationnet/stack-runner&quot;&gt;Stack Runner&lt;/a&gt; to 
handle the processing of a stack of PSR-15 middleware.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class StackRunner implements DelegateInterface
{
    public function __construct(
   array $stack,
        InvokerInterface $invoker,
        ResponseFactoryInterface $responseFactory
    ) { ... }

    public function process(ServerRequestInterface $request)
    {
        if (!isset($this-&amp;gt;stack[$this-&amp;gt;current])) {
            return $this-&amp;gt;responseFactory-&amp;gt;createResponse();
        }
        $middleware = $this-&amp;gt;stack[$this-&amp;gt;current];
        $this-&amp;gt;current++;

        return $this-&amp;gt;invoker-&amp;gt;call([$middleware, 'process'], [
            'request' =&amp;gt; $request,
            'delegate' =&amp;gt; $this,
        ]);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;adr-action-domain-responder&quot;&gt;ADR (Action Domain Responder)&lt;/h2&gt;

&lt;p&gt;I went on to talk about ADR as being an adaptation of MVC that
is more suitable for use in Web Apps.
I’ve found this particularly useful when using Domain-Driven Design,
or when used to create &lt;em&gt;thin APIs&lt;/em&gt; where you
have just a thin layer of business logic on top of a data store.&lt;/p&gt;

&lt;p&gt;The issue with MVC is that the template is not the view. 
The &lt;em&gt;“view”&lt;/em&gt; of a web app is the HTTP response, and we split this
across our layers, as the body of the response is typically generated
by the view, with the knowledge of HTTP being encoded into our controllers.
We also bundle together various actions into one controller, which 
means instantiating the whole thing when we want to run one of the actions.&lt;/p&gt;

&lt;p&gt;ADR offers an alternative separation of concerns, where the
action methods of the controller are their own separate classes 
(or in my case anything &lt;em&gt;invokable&lt;/em&gt; via the &lt;code class=&quot;highlighter-rouge&quot;&gt;InvokerInterface&lt;/code&gt;).
I use an &lt;code class=&quot;highlighter-rouge&quot;&gt;InputHandler&lt;/code&gt; to deal with parsing the input from the HTTP Request, 
which the Invoker can then use (via the magic of named arguments).&lt;/p&gt;

&lt;p&gt;The domain (Model in MVC terminology) is where the business logic lives.
This is called domain, rather than model, to suggest use of
domain-driven design.&lt;/p&gt;

&lt;p&gt;To use ADR with PHP Middleware, add a &lt;em&gt;resolver&lt;/em&gt; to the end of the
chain of middleware to &lt;em&gt;dispatch&lt;/em&gt; the request to the appropriate 
&lt;code class=&quot;highlighter-rouge&quot;&gt;Action&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.darrenmothersele.com/img/radr.png&quot; alt=&quot;Web App&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;action&quot;&gt;Action&lt;/h2&gt;

&lt;p&gt;I’ve created a reference implementation of an &lt;em&gt;invokable&lt;/em&gt;
&lt;a href=&quot;https://github.com/ideationnet/wafer/blob/master/src/Action.php&quot;&gt;Action&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.darrenmothersele.com/img/action.png&quot; alt=&quot;Web App&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;demo&quot;&gt;Demo!&lt;/h2&gt;

&lt;p&gt;At this point in my talk I planned to give a demo of 
how you compose ADR with Middleware to create a working API.
Unfortunately, I had some tech issues getting my computer linked
up to the projector, and I was starting to feel really ill (full of 
cold). By this time the caffeine was starting to wear off, and 
I needed the talk to end!&lt;/p&gt;

&lt;p&gt;I’ve put the example code up in a 
&lt;a href=&quot;https://github.com/darrenmothersele/dcldn2017&quot;&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/Simple-Made-Easy&quot;&gt;Simple Made Easy&lt;/a&gt; - talk by Rich Hickey&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/http-interop/http-middleware&quot;&gt;HTTP Middleware&lt;/a&gt; and
&lt;a href=&quot;https://github.com/http-interop/http-factory&quot;&gt;HTTP Factory&lt;/a&gt; interfaces.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/middlewares/psr15-middlewares&quot;&gt;PSR15 Middlewares&lt;/a&gt; a
set of really useful middlewares that can be used with a PSR15 middleware 
dispatcher.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ideationnet/stack-runner&quot;&gt;Stack Runner&lt;/a&gt; 
my reference implementation of a &lt;em&gt;very&lt;/em&gt; simple stack runner for executing
a chain of PSR15 middleware.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ideationnet/wafer&quot;&gt;Wafer&lt;/a&gt; an experimental implementation
of the ADR idea to be used along with PSR15 middleware and the stack runner.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Drop me a line with any feedback. Thanks!&lt;/p&gt;

</description>
        <pubDate>Tue, 28 Mar 2017 10:30:00 +0100</pubDate>
        <link>http://www.darrenmothersele.com/blog/2017/03/28/php-middleware/</link>
        <guid isPermaLink="true">http://www.darrenmothersele.com/blog/2017/03/28/php-middleware/</guid>
        
        <category>drupal</category>
        
        <category>featured</category>
        
        <category>drupal-planet</category>
        
        
        <category>Web Dev</category>
        
      </item>
    
      <item>
        <title>PHP PSR-7 Proxy</title>
        <description>&lt;p&gt;Creating a proxy in PHP is easy thanks to the 
&lt;a href=&quot;http://www.php-fig.org/psr/psr-7/&quot;&gt;PSR-7 HTTP message interface&lt;/a&gt; 
definitions.&lt;/p&gt;

&lt;p&gt;Different tools using these same interface definitions are
interoperable, without any extra work. 
With PSR-7 it is easy to write a simple proxy. 
Like this one, that sits between a client and an API and
performs some mapping and reformatting of the data.&lt;/p&gt;

&lt;p&gt;If you’d rather read the code than the description
go to &lt;a href=&quot;https://github.com/darrenmothersele/php-psr7-proxy&quot;&gt;this GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I use the &lt;a href=&quot;http://docs.guzzlephp.org/en/latest/&quot;&gt;Guzzle&lt;/a&gt; 
HTTP client to make API calls in my code.
This works with HTTP message objects that conform to PSR-7.&lt;/p&gt;

&lt;p&gt;Symfony HTTP Foundation (as used in Drupal) can work with
PSR-7, but needs the PSR-7 Bridge library added.
So, for simple projects, I prefer to use a standalone 
implementation of PSR-7 like 
&lt;a href=&quot;https://zendframework.github.io/zend-diactoros/&quot;&gt;Zend Diactoros&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On simple projects I tend to use &lt;a href=&quot;http://php-di.org/&quot;&gt;PHP-DI&lt;/a&gt; 
to configure everything. So, a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;composer.json&lt;/code&gt; file 
for this project might look something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;require&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;php-di/php-di&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^5.4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;guzzlehttp/guzzle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^6.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;zendframework/zend-diactoros&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^1.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;mtdowling/jmespath.php&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^2.3&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;autoload&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;psr-4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;MyProxy\\&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’ve added &lt;a href=&quot;https://github.com/jmespath/jmespath.php&quot;&gt;JMESPath&lt;/a&gt; 
to perform data manipulation.&lt;/p&gt;

&lt;p&gt;I put some standard bootstrap stuff into an App class. In the
simplest of cases this just builds the DI container, and 
provides a &lt;code class=&quot;highlighter-rouge&quot;&gt;run()&lt;/code&gt; method.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class App
{
    /** @var Container */
    protected $container;

    public function __construct()
    {
        $builder = new ContainerBuilder;
        $builder-&amp;gt;addDefinitions(__DIR__.'/di-config.php');
        $this-&amp;gt;container = $builder-&amp;gt;build();
    }

    public function run(ServerRequestInterface $request, ResponseInterface $response)
    {
        $runner = $this-&amp;gt;container-&amp;gt;get(StackRunner::class);
        return $runner($request, $response);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This uses the Container from PHP-DI, and makes use of the 
&lt;code class=&quot;highlighter-rouge&quot;&gt;StackRunner&lt;/code&gt; class I talked about in 
&lt;a href=&quot;http://www.darrenmothersele.com/blog/2016/09/02/tiny-php-microframework-in-40-lines/&quot;&gt;a previous blog post&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;StackRunner&lt;/code&gt; is given a stack of middleware to process requests. 
They are configured in the &lt;code class=&quot;highlighter-rouge&quot;&gt;di-config.php&lt;/code&gt; file that is loaded
into PHP-DI’s container. 
Here’s my example config for a very simple proxy that forwards
requests to an API, then does some manipulation of the data
it receives before sending the reply back to the client.&lt;/p&gt;

&lt;p&gt;Here’s the DI config, simplified to show the important bits:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;return [

    'target' =&amp;gt; 'http://example.com',

    'middleware' =&amp;gt; [
        ProxyMiddleware::class,
        FilterMiddleware::class
    ],

    StackRunner::class =&amp;gt; object()
        -&amp;gt;constructorParameter('stack', get('middleware')),

    ProxyMiddleware::class =&amp;gt; object()
        -&amp;gt;constructorParameter('target', get('target')),
];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this example the middleware stack contains just two items. 
The first one proxies the request, the second one applies
a filter to the response, before returning.&lt;/p&gt;

&lt;p&gt;The actual implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;ProxyMiddleware&lt;/code&gt; is very 
straightforward, because of the use of compatible PSR-7 
http message objects.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class ProxyMiddleware
{
    /** @var Client */
    protected $client;

    protected $target;

    public function __construct(Client $client, $target)
    {
        $this-&amp;gt;client = $client;
        $this-&amp;gt;target = $target;
    }

    public function __invoke(ServerRequestInterface $request, ResponseInterface $response, callable $next)
    {
        $target = new Uri($this-&amp;gt;target);

        /** @var Uri $uri */
        $uri = $request-&amp;gt;getUri()
            -&amp;gt;withScheme($target-&amp;gt;getScheme())
            -&amp;gt;withHost($target-&amp;gt;getHost())
            -&amp;gt;withPort($target-&amp;gt;getPort());

        $request = $request-&amp;gt;withUri($uri);

        $response = $this-&amp;gt;client-&amp;gt;send($request);

        return $next($request, $response);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;ServerRequestInterface&lt;/code&gt; object it reused to
send on to the API via the Guzzle HTTP client.
I just reset the URI of the request and send it on.
You might want to do more than this when manipulating the
requests before passing them on, like removing/adding cookies.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;FilterMiddleware&lt;/code&gt; is just as simple…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class FilterMiddleware
{
    public function __invoke(ServerRequestInterface $request, ResponseInterface $response, $next)
    {
        $data = json_decode($response-&amp;gt;getBody()-&amp;gt;getContents(), true);
        
        // Do your manipulation of data here
        
        $response = new JsonResponse($data);
        return $next($request, $response);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The point of this article is not to discuss the 
filtering and manipulating the data so I have omitted 
those bits of the code. I actually pass in an object to do 
the filtering, via the DI config. 
Which makes this middleware reusable.&lt;/p&gt;

&lt;p&gt;The important point I wanted to highlight was just how
easy it is to make a simple proxy using PSR-7 for
compatibility.&lt;/p&gt;

&lt;p&gt;Here is how it is used, by creating a Diactoros 
&lt;code class=&quot;highlighter-rouge&quot;&gt;ServerRequestInterface&lt;/code&gt; object from the incoming PHP
request, and using the &lt;code class=&quot;highlighter-rouge&quot;&gt;SapiEmitter&lt;/code&gt; to output the
response. Here’s my &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy.php&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require_once __DIR__.'/../vendor/autoload.php';

$request = ServerRequestFactory::fromGlobals();
$response = (new App)-&amp;gt;run($request, new Response);
(new SapiEmitter)-&amp;gt;emit($response);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can run this with PHP’s internal web server,
by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;php -S localhost:8080 proxy.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can get the example code from 
&lt;a href=&quot;https://github.com/darrenmothersele/php-psr7-proxy&quot;&gt;this GitHub repo&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Nov 2016 00:00:00 +0000</pubDate>
        <link>http://www.darrenmothersele.com/blog/2016/11/21/php-psr7-proxy/</link>
        <guid isPermaLink="true">http://www.darrenmothersele.com/blog/2016/11/21/php-psr7-proxy/</guid>
        
        <category>php</category>
        
        <category>featured</category>
        
        
        <category>Web Dev</category>
        
      </item>
    
      <item>
        <title>FFGL Plugins for Resolume</title>
        <description>&lt;p&gt;I recently spent some time learning how to build FFGL plugins.&lt;/p&gt;

&lt;h2 id=&quot;download&quot;&gt;Download&lt;/h2&gt;

&lt;p&gt;I’ve put examples up on GitHub in the
&lt;a href=&quot;https://github.com/cyrilcode/ffglplugin-examples&quot;&gt;cyrilcode/ffglplugin-examples&lt;/a&gt;
repository.&lt;/p&gt;

&lt;p&gt;I’ve compiled and uploaded to the
&lt;a href=&quot;https://github.com/cyrilcode/ffglplugin-examples/releases&quot;&gt;releases page&lt;/a&gt;
but I only have builds for OSX.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/ffgl-plugins/Evil.png&quot; alt=&quot;Example FFGL Plugin&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;details&quot;&gt;Details&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;http://freeframe.sourceforge.net/&quot;&gt;website&lt;/a&gt; and
&lt;a href=&quot;http://freeframe.sourceforge.net/specification_1-5.html&quot;&gt;the spec&lt;/a&gt;
give the details. But I found the spec quite hard to digest.
The only time I’d compiled dynamic plugins like this was to
create PHP extensions. This is very different.
I got the &lt;a href=&quot;https://sourceforge.net/projects/freeframe/files/FreeFrame%201.5%20FFGL/1.5/FFGLSDK_1_5.tar.gz/download&quot;&gt;SDK examples&lt;/a&gt; to compile eventually.
It wasn’t easy. I had to hack a couple of files due to changes in the OpenGL
header files. I’m not sure if this is an OSX issue, or just that the
SDK is really old.&lt;/p&gt;

&lt;p&gt;There is an example in the &lt;a href=&quot;https://github.com/resolume/ffgl&quot;&gt;resolume/ffgl&lt;/a&gt;
GitHub repo that I found useful. I also found this &lt;a href=&quot;https://github.com/leadedge/ShaderMaker&quot;&gt;ShaderMaker&lt;/a&gt;
source code to be quite useful.&lt;/p&gt;

&lt;p&gt;I ended up creating my own &lt;a href=&quot;https://github.com/cyrilcode/ffglplugin-examples/blob/master/MyPlugin.h&quot;&gt;MyPlugin.h&lt;/a&gt; header file to abstract
some of the boiler-plate work you have to do to create each
plugin. Using this header, creating a plugin is a simple matter of converting
the GLSL code you want to use. For example:&lt;/p&gt;

&lt;h3 id=&quot;emptyeffecth&quot;&gt;EmptyEffect.h&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &quot;MyPlugin.h&quot;

class EmptyEffect {

    float redness = 0.5f;
    float greenness = 0.5f;
    float blueness = 0.5f;
    GLint colorLocation;

public:
    PluginConfig getConfig();

    void init(FFGLShader &amp;amp;shader);
    void process(std::vector&amp;lt;float&amp;gt; &amp;amp;paramValues, FFGLExtensions &amp;amp;extensions);

};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;emptyeffectcpp&quot;&gt;EmptyEffect.cpp&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
#include &quot;EmptyEffect.h&quot;

FFGL_PLUGIN(EmptyEffect,&quot;DZ00&quot;,&quot;RGB Source&quot;,FF_SOURCE,&quot;Sample FFGL Plugin&quot;,
    &quot;by Darren Mothersele - www.darrenmothersele.com&quot;)

std::string fragmentShaderCode = R&quot;GLSL(
uniform vec3 color;
void main()
{
    gl_FragColor = vec4(color,1);
}
)GLSL&quot;;

PluginConfig EmptyEffect::getConfig() {
    PluginConfig pluginConfig;
    pluginConfig.shaderCode = fragmentShaderCode;
    pluginConfig.params.push_back({&quot;Red&quot;, FF_TYPE_STANDARD, 0.5f});
    pluginConfig.params.push_back({&quot;Green&quot;, FF_TYPE_STANDARD, 0.5f});
    pluginConfig.params.push_back({&quot;Blue&quot;, FF_TYPE_STANDARD, 0.5f});
    return pluginConfig;
}

void EmptyEffect::init(FFGLShader &amp;amp;shader) {
    colorLocation = shader.FindUniform(&quot;color&quot;);
}

void EmptyEffect::process(std::vector&amp;lt;float&amp;gt; &amp;amp;paramValues, FFGLExtensions &amp;amp;extensions)
{
    extensions.glUniform3fARB(colorLocation, paramValues[0], paramValues[1], paramValues[2]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;compiling&quot;&gt;Compiling&lt;/h2&gt;

&lt;p&gt;I found I needed to build in 32-bit mode for the plugins to
work in Resolume.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/cyrilcode/ffglplugin-examples&quot;&gt;GitHub&lt;/a&gt; for more details.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Sep 2016 00:00:00 +0100</pubDate>
        <link>http://www.darrenmothersele.com/blog/2016/09/20/ffgl-plugins-resolume/</link>
        <guid isPermaLink="true">http://www.darrenmothersele.com/blog/2016/09/20/ffgl-plugins-resolume/</guid>
        
        <category>misc</category>
        
        <category>featured</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>Tiny PHP Micro-Framework in 40 Lines of Code</title>
        <description>&lt;p&gt;I’m working on a project that needs a very simple backend.
The app will only have a handful of users, and the frontend
interface has been built in Angular 2. The backend is mainly 
a proxy, with a bit of added configuration.&lt;/p&gt;

&lt;p&gt;Drupal 8, with it’s built in support for REST(ish) services,
could be an option for modern web apps built with Angular 2.
But, in this case, Drupal would have definitely been overkill.
Perhaps &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt; (Node.js) could have 
been an option, or any of the multitude of PHP 
Micro-frameworks. But this seemed like a good excuse to
play with some modern PHP, and build something minimal.&lt;/p&gt;

&lt;p&gt;As this project just needed a simple proxy to a third-party API
to add in some configuration and cache some things, it could
have been done in a single PHP script. But, this is modern
PHP - so we’re going to try and do things a bit neater than 
that. We know that &lt;a href=&quot;https://www.infoq.com/presentations/Simple-Made-Easy&quot;&gt;easy is not always simple&lt;/a&gt;.
I want to keep this simple, which is not necessarily the
easiest option. The most important rule to follow here is
the &lt;strong&gt;single responsibility principle&lt;/strong&gt;. Each file will
contain just one class, each class with encapuslate one thing,
and each block of code will have a single responsibility. 
I may blog about other interesting parts of this app in 
the future, but for now let’s just look at the core
of the app.&lt;/p&gt;

&lt;p&gt;Here’s the code in it’s entirety. The astute among you may
recognise this as a middleware dispatcher, like &lt;a href=&quot;http://www.slimframework.com/&quot;&gt;Slim&lt;/a&gt;,
&lt;a href=&quot;http://stackphp.com/&quot;&gt;Stack&lt;/a&gt;, or &lt;a href=&quot;http://relayphp.com/&quot;&gt;Relay&lt;/a&gt;…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;use DI\InvokerInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

class StackRunner
{
    /** @var InvokerInterface */
    protected $invoker;

    protected $stack = [];
    protected $current = 0;

    public function __construct(InvokerInterface $invoker, $stack)
    {
        $this-&amp;gt;invoker = $invoker;
        $this-&amp;gt;stack = $stack;
    }

    public function __invoke(ServerRequestInterface $request, ResponseInterface $response)
    {
        if (!isset($this-&amp;gt;stack[$this-&amp;gt;current])) {
            return $response;
        }

        $middleware = $this-&amp;gt;stack[$this-&amp;gt;current];
        $this-&amp;gt;current++;

        return $this-&amp;gt;invoker-&amp;gt;call($middleware, [
          'request' =&amp;gt; $request,
          'response' =&amp;gt; $response,
          'next' =&amp;gt; $this,
        ]);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s it. Less than 40 lines of code.&lt;/p&gt;

&lt;p&gt;There’s another &lt;em&gt;no-framework&lt;/em&gt; implementation called 
&lt;a href=&quot;https://github.com/woohoolabs/harmony&quot;&gt;Harmony&lt;/a&gt; that takes a similar
approach. It’s also very small at 200 lines. I think 
this minimal version above, less than a quarter of the size, is
useful because it’s so simple. But, it might not be obvious 
at first glance what it’s doing. Let’s break it down, look 
at how it works, and how to use it.&lt;/p&gt;

&lt;p&gt;The website for &lt;a href=&quot;http://stackphp.com/&quot;&gt;StackPHP&lt;/a&gt; has a diagram that 
shows how the middleware dispatcher idea works. They refer to this as an onion.&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
    &lt;img src=&quot;/img/onion.png&quot; /&gt;
    &lt;figcaption&gt;Middleware Onion (source: &lt;a href=&quot;http://stackphp.com/&quot;&gt;StackPHP&lt;/a&gt;)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt;: Ignore the session layer. I’m building a restful API, and restful
APIs should not have state. One of the six constraints for a REST 
architecture is statelessness. I wont go into this now, but save
this for a future blog post.&lt;/p&gt;

&lt;p&gt;In this model you build up a &lt;em&gt;stack&lt;/em&gt; of middleware, then pass the request 
through each one, then pass the response back out through each layer. 
Each layer in the stack gets to process the request and response as they
travel into the core of the app, and then back out again. 
In my actual app I have layers that deal with CORS, JWT Authentication, 
Exception Handling, Firewall, Logging, Routing to the correct controller,
and JSON formatting. Everything is nicely separated into layers that deal with a single 
step of the process.&lt;/p&gt;

&lt;p&gt;The core of the app is your business logic. Everything is separated
into layers, and each can be tested and reasoned about in isolation.&lt;/p&gt;

&lt;p&gt;The stack of middleware is injected into the &lt;code class=&quot;highlighter-rouge&quot;&gt;StackRunner&lt;/code&gt;
as a dependency via the constructor, along with an instance
of an implementation of the &lt;code class=&quot;highlighter-rouge&quot;&gt;InvokerInterface&lt;/code&gt;.
In my case I’m using &lt;a href=&quot;http://php-di.org/&quot;&gt;PHP-DI&lt;/a&gt; as a dependency injection container
and it’s container implements the required interface. 
The interface provides a &lt;code class=&quot;highlighter-rouge&quot;&gt;call()&lt;/code&gt; method that given a 
PHP callable (or string registered in the container) 
instantiates the callable (if required) and uses the container
to provide any arguments.&lt;/p&gt;

&lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;StackRunner&lt;/code&gt; class produces an invokable object. When invoked
the stack of middleware is traversed, executing each one (via the &lt;code class=&quot;highlighter-rouge&quot;&gt;InvokerInterface&lt;/code&gt; object)
and passing itself along, so that execution can continue.
The implementation of the &lt;code class=&quot;highlighter-rouge&quot;&gt;__invoke()&lt;/code&gt; method does this
and has just 3 simple sections:&lt;/p&gt;

&lt;p&gt;1) First it checks to see if it has reached the end of the stack
of middlware. In which case it just returns the current
&lt;code class=&quot;highlighter-rouge&quot;&gt;$response&lt;/code&gt; so that it can travel back up the stack.&lt;/p&gt;

&lt;p&gt;2) If not at the end of the stack, the current middleware
is retrieved from the stack and the stack pointer 
(&lt;code class=&quot;highlighter-rouge&quot;&gt;$this-&amp;gt;current&lt;/code&gt;) is moved along to the next middleware.&lt;/p&gt;

&lt;p&gt;3) The InvokerInterface is used to call the middleware,
passing in the &lt;code&gt;$request&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$response&lt;/code&gt;, and the
stack runner as &lt;code class=&quot;highlighter-rouge&quot;&gt;$next&lt;/code&gt; so that it can be called
from within the middleware to continue execution along
the rest of the stack.&lt;/p&gt;

&lt;p&gt;So, how do you make use of this?&lt;/p&gt;

&lt;p&gt;Well, you need a few things to make it work.
As you can see in the code above, it’s programmed against
interfaces from PSR-7. This is the PHP-FIG (Framework
Interoperability Group) effort to standardise the
Request and Response object interfaces. 
Any implementation of PSR-7 will do, for example
the Diactoros package from Zend.&lt;/p&gt;

&lt;p&gt;You also need to register your dependencies with 
a PHP-DI container and provide that to the constructor.
Here’s an example of how it might be used:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$stack = [ExampleMiddleware::class];
$builder = new ContainerBuilder;
$builder-&amp;gt;addDefinitions($config);
$container = $builder-&amp;gt;build();
$runner = new StackRunner($container, $stack);
$response = $runner($request, $response);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So what does a middleware in this stack look like?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class ExampleMiddleware
{
    public function __invoke($request, $response, $next)
    {
        // 1. optionally do something with $request

        // 2. continue execution down the stack
        $response = $next($request, $response);

        // 3. optionally do something with $response

        // 4. return $response
        return $response;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can add type hints to the &lt;code class=&quot;highlighter-rouge&quot;&gt;__invoke&lt;/code&gt; method. I left
them off here for brevity. When invoked, the middleware
receives the request and response. It can process these,
call the next middleware (via the &lt;code class=&quot;highlighter-rouge&quot;&gt;$next&lt;/code&gt; callable provided),
then it &lt;strong&gt;must&lt;/strong&gt; return a response object.&lt;/p&gt;

&lt;p&gt;Thanks to the &lt;code class=&quot;highlighter-rouge&quot;&gt;InvokerInterface&lt;/code&gt; it’s possible to use the 
DI container to instantiate the middleware to provide
dependencies.&lt;/p&gt;

&lt;p&gt;By using a middleware stack runner like this you can 
easily get separation of concerns and make your code simpler.
For simple tasks a PHP framework can be overkill. You can 
get a long way with a clean design by using a dependency injection
container to instantiate your objects, and a layered calling
mechanism like this. Your code will be more testable,
maintainable, and reusable. And, you can get to working on the
core domain of the problem without worrying about framework 
or CMS issues. Rather than trying to fit your solution into
the constraints of a framework, you can build your solution
in the most appropriate way, deal with any complexities in the domain
logic up front, and then wrap it up as required.&lt;/p&gt;

</description>
        <pubDate>Fri, 02 Sep 2016 00:00:00 +0100</pubDate>
        <link>http://www.darrenmothersele.com/blog/2016/09/02/tiny-php-microframework-in-40-lines/</link>
        <guid isPermaLink="true">http://www.darrenmothersele.com/blog/2016/09/02/tiny-php-microframework-in-40-lines/</guid>
        
        <category>php</category>
        
        <category>featured</category>
        
        
        <category>Web Dev</category>
        
      </item>
    
      <item>
        <title>TinyLetter #6 - The Return</title>
        <description>&lt;p&gt;Hello! &lt;/p&gt;

&lt;p&gt;Thanks to everyone who replied to my last letter. Feedback suggests not everyone understands everything in my letters. But, you enjoy receiving them anyway. It’s hard to know what to write, as I have such a variety people on this list. The original aim for this letter was to be a general update for Friends and Family. Since I removed my Facebook and don’t use social media, I felt I needed to find ways to stay connected. This should be an infrequent summary of everything I’ve been up to. But, unlike social media I aim to make it a bit more mindful. I think about what to write. But, it’s hard. With friends, family, and colleagues from the various worlds I inhabit, it’s hard to cater to all. Most of what I do is with technology, but I try to save the more technical writings for my blog.&lt;/p&gt;

&lt;p&gt;The theme for this letter is returns. Yes, I’ve just done my VAT return, but there’s more exciting returns to tell you about.&lt;/p&gt;

&lt;p&gt;First, the Creative Coding Meetup group that I started in 2014 is returning after a long hiatus. We had a good run of events in 2015, but after losing our regular venue it was hard to keep the momentum going. Earlier in the year I was at Resonate, as were many members of the group. After reminiscing about the excellent meetups we’d had, Jonathon volunteered to help me with the running of the group. The search for a new venue took us a while, but we’re back from September 12th in a shiny new venue near Old Street. More information will appear on the 
&lt;a href=&quot;http://www.meetup.com/london-creative-coding/&quot;&gt;Meetup group page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Silly Ideas Factory is also making a return. We’re taking our participatory pantomime, &lt;a href=&quot;http://www.shambalafestival.org/act2016/whose-shoe-is-it-anyway-the-improv-panto/&quot;&gt;“Whose Shoe is it Anyway?”&lt;/a&gt; to Shambala festival this next weekend. &lt;/p&gt;

&lt;p&gt;I started the Silly Ideas Factory with two burner friends, Michael and Nat, to encourage more silliness in the world. Towards the end of 2014, Michael and I started talking about organising a party to celebrate the invention of the Kaleidoscope. An event, I’m sure you’ll agree, is worthy of celebration! We don’t know the exact date that Brewster invented the device. We do know he first demonstrated it in 1816, and was awarded the patent in 1817. But, I found a date of some of his early experiments that lead to the discovery in 1815. That was convenient as it meant in 2015 we could rightly say “200 years of Kaleidoscope”. &lt;/p&gt;

&lt;p&gt;Michael and I started looking around for venues that would let us create our vision. We’d just been on a site visit in East London when we sat down for a drink and discussed our options. After a lengthy discussion, we realised that perhaps we didn’t want to organise a party. All we really wanted was an excuse to be silly, and for others to join in the silliness too. We talked about creating an event where people could come and be as silly as they wanted, with no fear of judgement. And the Silly Ideas Factory was born. &lt;/p&gt;

&lt;p&gt;We ran a series of silly events at The Others in Stoke Newington: A participatory pantomime “Whose Shoe is it Anyway?”; A night of computer games bought to life called “Up Up Down Down Left Right Left Right B A Start”; the “Glow Stick Crisp Packet AGM”; and of course the very silly “Silly Sports Day” in Regents Park. We took The Factory to festivals that summer, including Secret Garden Party, and even hosted an event at Somerset House in London as part of their “Now Play This” festival.&lt;/p&gt;

&lt;p&gt;Now we take it to Shambala festival, one of my favourite festivals in the UK. If you are there this weekend you should come along and join in the silliness. We’re on the Cocoon Stage at 12:30 on Saturday. This is a new space to provide more family entertainment. Silliness that all the family can enjoy! &lt;/p&gt;

&lt;p&gt;Another return: This last month I made my return to Scandinavia.    I spent a month in Denmark in 2001 for a post-graduate summer school in computer science. The end of that visit coincided with the Copenhagen Jazz festival, where I got to see Ray Charles. Amazing! This time it was just a couple of days in Stockholm. Nikki had a meeting there, so I tagged along for the ride. It was just a brief visit, but we packed in a lot. A highlight was visiting the Nodem building, a space created by the local Burning Man community. It’s great as a burner you can go anywhere in the world and meet like minded people. We attended an event called “Teal for Burners.” I’ve had the book, Reinventing Organisations, on my reading list for a while. After this event I came home and immediately started reading it. These are world changing ideas. The event was inspiring. I was also inspired by what the Swedish burning man community have created with the space. I’m going to try and return next Summer for &lt;a href=&quot;http://theborderland.se/&quot;&gt;Borderland&lt;/a&gt;, the Scandinavian burn event. &lt;/p&gt;

&lt;p&gt;Another upcoming return is my return to the Drupal conference, this year in Dublin. So, another return to Dublin, less than a year since my last visit. If I’m honest, I would have to say I’m not as excited about the Drupal conference this year. I kinda wish I was attending the Angular Connect event that is happening in London at the same time. I’ve spent a lot of my spare time looking at Angular 2 recently. It’s got me excited about the future of Javascript, and web development. Now is not the time to go into that, perhaps I’ll blog about it. But, the Drupal conference is always fun and informative. I’m sure it will be a great week and, as always, it will be great to catch up with all my friends in the Drupal community.  &lt;/p&gt;

&lt;p&gt;I’ve returned to work with CTVC on the TrueTube project. This is just a day or two per week at the moment, as I’m also working on another project 3 days per week until mid-October. After that I’m travelling for 2 weeks to visit Nikki’s family abroad. &lt;/p&gt;

&lt;p&gt;Anyway, thanks for reading, I hope not too many of these letters get returned! :)&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;Daz&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Aug 2016 00:00:00 +0100</pubDate>
        <link>http://www.darrenmothersele.com/blog/2016/08/23/tiny-letter-6/</link>
        <guid isPermaLink="true">http://www.darrenmothersele.com/blog/2016/08/23/tiny-letter-6/</guid>
        
        <category>misc</category>
        
        <category>featured</category>
        
        
        <category>personal</category>
        
      </item>
    
      <item>
        <title>TinyLetter #5 - Cyril, Fractals, and a Book</title>
        <description>&lt;p&gt;Hello,  &lt;/p&gt;

&lt;p&gt;If this is the first time you’ve received my TinyLetter, welcome!
Since the last letter, a couple of people joined (via my website)
and I added everyone from my LinkedIn account. 
Apologies if you don’t want this. Let me know and I’ll remove you,
or use the unsubscribe link. No hard feelings. 
If you’re unsure what this is, check the letter archive on my
website. I don’t use Facebook, so this is my way of
spamming everyone I know.&lt;/p&gt;

&lt;p&gt;I mentioned in the last letter that my contact at MTV was
coming to an end. That’s done now, and I’m looking for new
opportunities. I’ve been keeping myself busy for the past couple of months. 
I’ve given a couple of training courses.
One about Drupal 7, although with Drupal 8 adoption rising, I’m
hoping that will be the last time I’m asked to do a D7 training.
I’ve also been doing general PHP trainings, which I’ve written up into a book.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;https://leanpub.com/phpframework&quot;&gt;
&lt;img src=&quot;/img/letter5-book-sm.jpg&quot; alt=&quot;PHP Book&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s a short guide, intended to be a weekend project, based on teaching modern PHP to Drupal developers. It was originally intended to help developers move from Drupal 7 to Drupal 8. 
I refined the content, rewrote it a few times, and it’s now a basic
 introduction to modern PHP aimed at all web developers.
It’s available from &lt;a href=&quot;https://leanpub.com/phpframework&quot;&gt;Leanpub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/img/letter5-cyril-resonate-sm.jpg&quot; alt=&quot;Cyril at Resonate&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve been dedicating some time to the development of Cyril.
There’s been a mini spurt of interest in my live-coding language
since the Resonate festival in Serbia. Cyril user Dan Hett gave a 
lecture, and I had chance to demo it to a few new people. 
Dan gave a great talk about his work, about live-coding in general, 
and did a live demo of Cyril up on the big screen in the main hall.
In response to feedback, I posted a &lt;a href=&quot;https://medium.com/cyril-live-coding/getting-started-with-beta-6-c74e93463c3d&quot;&gt;getting started guide&lt;/a&gt;, 
and I have been working on a cross-platform build to get it
working on Windows and Linux (yes, it’s OSX only at the moment).&lt;/p&gt;

&lt;p&gt;I created a new website for Cyril, and I posted an article
&lt;a href=&quot;https://medium.com/cyril-live-coding/cyril-the-story-so-far-b77a7f90d37f&quot;&gt;“Cyril, The Story So Far…”&lt;/a&gt; that explains how I got from mind-reading octopus, to
live-coding language for visuals.&lt;/p&gt;

&lt;p&gt;Resonate was awesome this year. I learned a lot, and found lots of inspiration. I’ve already 
bought my ticket for next year!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;/blog/2016/06/05/more-3d-fractals/&quot;&gt;
&lt;img src=&quot;/img/letter5-fractal-sm.jpg&quot; alt=&quot;Fractal #13&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve posted up some of my &lt;a href=&quot;/blog/2016/06/05/more-3d-fractals/&quot;&gt;fractal art&lt;/a&gt;. 
This image above is my
personal favourite out of all the “discoveries” I’ve made so far.
I’ve posted up more creations on my 
website &lt;a href=&quot;http://www.darrenmothersele.com/blog/2016/06/05/more-3d-fractals/&quot;&gt;here&lt;/a&gt;, including a couple of failed experiments.&lt;/p&gt;

&lt;p&gt;Unfortunately, I’m not going to be at Glastonbury this year, but
I did find this interesting 
&lt;a href=&quot;http://www.meetup.com/Hampstead-Heath-Philosophy-Walks/events/231660330/&quot;&gt;Philosophy walk&lt;/a&gt; 
around Hampstead Heath, so I think I’ll be doing that 
next weekend instead.&lt;/p&gt;

&lt;p&gt;Thanks for reading, and do let me know what you’re up to,&lt;/p&gt;

&lt;p&gt;Daz&lt;/p&gt;

</description>
        <pubDate>Fri, 17 Jun 2016 00:00:00 +0100</pubDate>
        <link>http://www.darrenmothersele.com/blog/2016/06/17/tiny-letter-5/</link>
        <guid isPermaLink="true">http://www.darrenmothersele.com/blog/2016/06/17/tiny-letter-5/</guid>
        
        <category>misc</category>
        
        <category>featured</category>
        
        
        <category>personal</category>
        
      </item>
    
      <item>
        <title>PHP Framework in One Weekend</title>
        <description>&lt;p&gt;&lt;b&gt;UPDATE: Now available in paperback from &lt;a href=&quot;http://amzn.to/2bNv560&quot;&gt;Amazon&lt;/a&gt; and other online retailers.
The eBook is available on &lt;a href=&quot;https://leanpub.com/phpframework&quot;&gt;Leanpub&lt;/a&gt;.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Earlier this year I set about creating a day of training for 
DrupalCamp London. It was based on a PHP Framework
course I’d given, but reduced to fit into a day. 
We ended up focusing on Modern PHP, as that was most useful for the
attendees in their transition from Drupal 7 to Drupal 8.&lt;/p&gt;

&lt;p&gt;It was a really successful day, and I had some great feedback. 
I have since developed the idea into a two day training course,
which looks at some of the core concepts behind most modern PHP apps.&lt;/p&gt;

&lt;p&gt;Over the past couple of months I have worked hard to refine the 
content and edit it down into a short guide. I’ve released it
(thanks to &lt;a href=&quot;https://leanpub.com/phpframework&quot;&gt;Leanpub&lt;/a&gt;)
in the form of a book. It guides the reader through a 
weekend-long project to construct a simple PHP web framework.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“a weekend, the fundamental unit of coding self-improvement” 
- Peter Shirley&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In particular, it uses Symfony Components, and some other popular
PHP packages, to demonstrate the core features of
web frameworks, like routing, templating, controllers, and 
dependency injection. Projects such as Drupal, phpBB, Laravel, eZ Publish, Joomla!, Magento, Piwik, and many more are using Symfony Components as a foundation on which to build. The book uses these, and more, to build our own PHP Framework
in a weekend.&lt;/p&gt;

&lt;p&gt;Here’s the full contents:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Getting Started&lt;/li&gt;
  &lt;li&gt;Managing Complexity&lt;/li&gt;
  &lt;li&gt;Testing&lt;/li&gt;
  &lt;li&gt;HTTP&lt;/li&gt;
  &lt;li&gt;Templating&lt;/li&gt;
  &lt;li&gt;Content&lt;/li&gt;
  &lt;li&gt;Routing&lt;/li&gt;
  &lt;li&gt;Controllers&lt;/li&gt;
  &lt;li&gt;Dependency Injection&lt;/li&gt;
  &lt;li&gt;Design and Layout&lt;/li&gt;
  &lt;li&gt;Reuse&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Click the cover image below to get the book:&lt;/p&gt;

&lt;div&gt;&lt;a href=&quot;https://leanpub.com/phpframework&quot;&gt;
&lt;img src=&quot;/img/phpframework-book.png&quot; alt=&quot;PHP Framework in One Weekend&quot; /&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Drop me a line if you have any questions.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Jun 2016 13:30:00 +0100</pubDate>
        <link>http://www.darrenmothersele.com/blog/2016/06/16/php-framework-weekend/</link>
        <guid isPermaLink="true">http://www.darrenmothersele.com/blog/2016/06/16/php-framework-weekend/</guid>
        
        <category>php</category>
        
        <category>featured</category>
        
        <category>drupal-planet</category>
        
        
        <category>Web Dev</category>
        
      </item>
    
      <item>
        <title>3D Fractals</title>
        <description>&lt;p&gt;Click images below to get the large, high-quality versions.&lt;/p&gt;

&lt;p&gt;This is one of my most recent creations…&lt;/p&gt;

&lt;div&gt;
&lt;a href=&quot;/img/fractals/13.png&quot;&gt;&lt;img src=&quot;/img/fractals/13sm.jpg&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;I created that image above with a program called Mandelbulb 3D. 
It includes many fractal equations, including the 3D version of the
famous Mandelbrot set, the Mandelbulb.&lt;/p&gt;

&lt;p&gt;I found it hard at first to get anything interesting out of 
Mandelbulb, so I went off on an exploration of fractal geometry.
I figured I’d be able to get better results if I knew the theory
behind what the equations were doing, rather than just randomly 
combining fractal equations and randomly tweaking parameters.&lt;/p&gt;

&lt;p&gt;I started with the Mandelbrot set, like most 
people who start experimenting with fractals. I quickly moved on to some simple iterated functions. My very first experiments were with some equations I found in 
an old book “Symmetry in Chaos” by Michael Field and Martin Golubitsky.&lt;/p&gt;

&lt;div&gt;
&lt;a href=&quot;/img/fractals/05.png&quot;&gt;&lt;img src=&quot;/img/fractals/05tm.jpg&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/img/fractals/06.png&quot;&gt;&lt;img src=&quot;/img/fractals/06tm.jpg&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;I combined this method of plotting the images, with 
fractal equations, and it mainly went wrong. 
Some of the wrong images actually looked quite interesting…&lt;/p&gt;

&lt;div&gt;
&lt;a href=&quot;/img/fractals/09.png&quot;&gt;&lt;img src=&quot;/img/fractals/09tm.jpg&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Eventually, I accidentally came up with this:&lt;/p&gt;

&lt;div&gt;
&lt;a href=&quot;/img/fractals/08.jpg&quot;&gt;&lt;img src=&quot;/img/fractals/08sm.jpg&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;It was actually a black and white render, but I’ve applied some fake colouring. 
I thought it looked a bit “spacey”, so I sampled colours from a 
universe photo.&lt;/p&gt;

&lt;p&gt;Going back to Mandelbulb, my search for interesting fractal combinations
was much more fruitful. Some of my discoveries are below.&lt;/p&gt;

&lt;p&gt;In the beginning, I was using fog to emphasise depth. In some
cases I think I overdid it…&lt;/p&gt;

&lt;div&gt;
&lt;a href=&quot;/img/fractals/01.jpg&quot;&gt;&lt;img src=&quot;/img/fractals/01tm.jpg&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;I think the most “realistic” images have come from
using colours sampled from real photos. The hardest part
of creating this next image was getting the camera angle right. 
I think the sampled colours make it look almost like a real
forest scene. Natural colours (sampled from real photos) tend to be much more 
desaturated than the colours picked manually…&lt;/p&gt;

&lt;div&gt;
&lt;a href=&quot;/img/fractals/02.jpg&quot;&gt;&lt;img src=&quot;/img/fractals/02tm.jpg&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;This was my first experiment with combining two fractal formulas. 
Rather than alternating multiple formulas to create a combined 
geometry, you can visualise the output of two formulas, if you can align 
them correctly…&lt;/p&gt;

&lt;div&gt;
&lt;a href=&quot;/img/fractals/03.jpg&quot;&gt;&lt;img src=&quot;/img/fractals/03tm.jpg&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;This one has a grainy look because I reduced the quality to 
speed up the rendering process. 
I thought it looked a bit like a jellyfish, so I added some 
colours to make it look like it was underwater. 
Unfortunately, when I increased the quality to create the 
final render it lost it’s form. So, here’s the grainy version…&lt;/p&gt;

&lt;div&gt;
&lt;a href=&quot;/img/fractals/07.jpg&quot;&gt;&lt;img src=&quot;/img/fractals/07tm.jpg&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;This next one might be my favourite so far. 
Click to see full version. I really like the 
shading on the “moon” in the background…&lt;/p&gt;

&lt;div&gt;
&lt;a href=&quot;/img/fractals/10.png&quot;&gt;&lt;img src=&quot;/img/fractals/10tm.jpg&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Here’s a few more of my fractal experiments…&lt;/p&gt;

&lt;div&gt;
&lt;a href=&quot;/img/fractals/04.jpg&quot;&gt;&lt;img src=&quot;/img/fractals/04tm.jpg&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;a href=&quot;/img/fractals/11.png&quot;&gt;&lt;img src=&quot;/img/fractals/11tm.jpg&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;a href=&quot;/img/fractals/12.png&quot;&gt;&lt;img src=&quot;/img/fractals/12tm.jpg&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;a href=&quot;/img/fractals/14.png&quot;&gt;&lt;img src=&quot;/img/fractals/14tm.jpg&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;a href=&quot;/img/fractals/15.png&quot;&gt;&lt;img src=&quot;/img/fractals/15tm.jpg&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;a href=&quot;/img/fractals/16.png&quot;&gt;&lt;img src=&quot;/img/fractals/16tm.jpg&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;a href=&quot;/img/fractals/17.png&quot;&gt;&lt;img src=&quot;/img/fractals/17tm.jpg&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;a href=&quot;/img/fractals/18.png&quot;&gt;&lt;img src=&quot;/img/fractals/18tm.jpg&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;a href=&quot;/img/fractals/19.png&quot;&gt;&lt;img src=&quot;/img/fractals/19tm.jpg&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

</description>
        <pubDate>Sun, 05 Jun 2016 00:00:00 +0100</pubDate>
        <link>http://www.darrenmothersele.com/blog/2016/06/05/more-3d-fractals/</link>
        <guid isPermaLink="true">http://www.darrenmothersele.com/blog/2016/06/05/more-3d-fractals/</guid>
        
        <category>misc</category>
        
        <category>featured</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>TinyLetter #4 - Tiny McLetterface</title>
        <description>&lt;p&gt;Hello,  &lt;/p&gt;

&lt;p&gt;That was March 2016!&lt;/p&gt;

&lt;p&gt;I will always remember it as the month in which the British public voted to name a £200 million polar research vessel “Boaty McBoatface.” A clear winner, the name received over 90,000 more votes than the second closest rival name. I hope the Natural Environment Research Council follow through and name the ship after the public vote. Then we’ll have at least one positive outcome from voting in the UK this year. &lt;/p&gt;

&lt;p&gt;I spoke at a conference earlier in the month. I tried something a bit different this time. Instead of a technical talk, I gave a more philosophical talk about changes in Drupal and the web. As a thought experiment, I went back in time to the mid 90s, and tried to explain to myself what we had done. Speaking to a room of web developers, I suggested that we have encouraged centralisation by ruining the experience on the open web. I presented some ideas to stop ruining the web, and some ideas to make it better. I think it went well, and I had some great feedback. The rest of the conference I spent catching up with people, and discussing ideas for new models of collaboration. I’ve been writing up my notes, and I’ll post them to my blog at some point soon. I hope to try out some of the ideas on future projects. &lt;/p&gt;

&lt;p&gt;This month I attended London’s first Consciousness Hacking meetup. The highlight was Robert Thomas who uses biometric feedback to generate personalised music experiences. This took me back to my experiments with neurofeedback, when I hacked a MindFlex toy to make a basic EEG reader. These experiments lead to me inventing the Cyril programming language. This meetup got me excited about getting back into this. And, I’ve now got a new EEG headset to experiment with. &lt;/p&gt;

&lt;p&gt;This event gave a different perspective on how technology might serve us. One of the presenters, Patrick Hilsbos, said “the world would be a better place if technology served as a catalyst for self-awareness, self-love, and true connection.” He is working on creating a “Spotify for experiences” using biofeedback for meditation, focus training, and relaxation.  &lt;/p&gt;

&lt;p&gt;My contract at MTV is coming to an end this month. Once I’ve finished, I’ll be looking for other projects. I’ve got a few requests for training, but other than that, in the short term I’ll be going back to my own projects. In particular, Cyril, the programming language I invented for live coding visuals. &lt;/p&gt;

&lt;p&gt;I’ll be returning to Serbia again next month, for Resonate. The conference which “brings together artists and educators to drive a forward-looking debate on the position of technology in art and culture.” It was one of my highlights of last year. Even more excited about it this year, because among the 44 lectures, will be one by Dan Hett. Dan makes use of my Cyril live coding language, and has contributed ideas (and code for Post Processing effects). I’m looking forward to seeing what Dan’s been up to. I hope it will be a chance for us to talk about the roadmap for future development of Cyril. &lt;/p&gt;

&lt;p&gt;Have a great month, and drop me a line let me know what you’re up to, &lt;/p&gt;

&lt;p&gt;Thanks for reading,  &lt;/p&gt;

&lt;p&gt;Daz  &lt;/p&gt;
</description>
        <pubDate>Fri, 01 Apr 2016 00:00:00 +0100</pubDate>
        <link>http://www.darrenmothersele.com/blog/2016/04/01/tiny-letter-4/</link>
        <guid isPermaLink="true">http://www.darrenmothersele.com/blog/2016/04/01/tiny-letter-4/</guid>
        
        <category>misc</category>
        
        <category>featured</category>
        
        
        <category>personal</category>
        
      </item>
    
      <item>
        <title>Unwired</title>
        <description>&lt;p&gt;In a bold move, Wired have removed themselves from the open web.&lt;/p&gt;

&lt;figure&gt;&lt;img src=&quot;/img/blog/wired-blocked.png&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;I enjoy buying the printed version of Wired magazine. Packed full of glossy adverts, I assumed this supported the online version. It seems that is not the case.&lt;/p&gt;

&lt;p&gt;I understand why Wired are doing this. With a more tech savvy audience, I guess they are suffering more from the rise of adblocking than others. Reports have claimed publishers earn less from advertising than users pay in bandwidth charges. Using an adblocker is now a necessity. It saves money, and improves the experience and performance of the open web. I’m sure Wired have taken this all into account. It is clear we need new a new model, and it’s brave of Wired to push this on us.&lt;/p&gt;

&lt;p&gt;The open web is the platform we are all building together. Our competition are the walled-garden silos. We are building a free and open ecosystem. Our competition are the closed monoliths with a single gatekeeper. The variety of experience across the open web can be our strength, but also our weakness. Our competition has tight control over user experience and strives to remove all friction. They may disrespect and exploit users in many ways, but they do respect user experience.&lt;/p&gt;

&lt;p&gt;Unfortunately, this doesn’t just remove Wired from the open web. This is a blow to everyone building the open web. It degrades the experience for our users. It contributes to the ruining of the open web, pushing users to centralised silos.&lt;/p&gt;

&lt;p&gt;I hit this barrier when following a link to an article on Wired from the open web. Wired refused access. Unexpected blockages like this create a bad experience for our (the open web’s) users. By degrading the experience on the open web we push people to centralised silos.&lt;/p&gt;

&lt;p&gt;How are we going to deal with this on the open web? Do we need some way to mark up links that lead away from the open web?&lt;/p&gt;

&lt;p&gt;Can we make it clear when links go off to centralised silos? Can we markup links to paywalls, adblock-blockers, or with otherwise unexpected behaviour?&lt;/p&gt;

&lt;p&gt;Can we (the open web) innovate a way to remunerate publishers? Can we do this without blocking, creating friction, or otherwise ruining user experience?&lt;/p&gt;

</description>
        <pubDate>Mon, 14 Mar 2016 00:00:00 +0000</pubDate>
        <link>http://www.darrenmothersele.com/blog/2016/03/14/un-wired-blocked/</link>
        <guid isPermaLink="true">http://www.darrenmothersele.com/blog/2016/03/14/un-wired-blocked/</guid>
        
        <category>misc</category>
        
        <category>featured</category>
        
        
        <category>Thoughts</category>
        
      </item>
    
  </channel>
</rss>
