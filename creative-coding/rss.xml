<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
                <title>Darren Mothersele - Creative Coding</title>
                <description>Posts categorized as 'creative coding'</description>
                <link>http://www.darrenmothersele.com</link>
                <atom:link href="http://www.darrenmothersele.com/creative-coding/rss.xml" rel="self" type="application/rss+xml" />
                
                        <item>
                                <title>Sending Base64 Encoded Data via HTTP in C++ using openFrameworks and Poco Net Libraries</title>
                                <description>&lt;p&gt;I needed a simple way to submit data to a server using C++, this example shows
how you can make use of the Poco libraries provided in openFrameworks to
simplify this task.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;The process is quite straightforward, if you&amp;#39;ve got your head around how the
Poco libraries work. This took a bit of googling, but eventually I came up
with a working example.&lt;/p&gt;

&lt;p&gt;My first attempt was to add the image (binary) data as a part, thus using
a multipart form encoding, but I could not get this to work. Until I&amp;#39;ve worked
out how to get multipart form encoding working with Poco::Net::HTMLForm I
guess I&amp;#39;ll stick with this.&lt;/p&gt;

&lt;p&gt;This code passes the binary data buffer (with the image data in it) to
a base64 encoder (also provided in the Poco libraries) and then adds it as
a standard form item to the form.&lt;/p&gt;

&lt;p&gt;Code is available in this &lt;a href=&quot;https://gist.github.com/darrenmothersele/7597016&quot;&gt;Gist&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/darrenmothersele/7597016.js&quot;&gt;&lt;/script&gt;
</description>
                                <pubDate>Fri, 22 Nov 2013 00:00:00 +0000</pubDate>
                                <link>http://www.darrenmothersele.com//blog/2013/11/22/sending-base64-encoded-data-poco-net-openframeworks/</link>
                                <guid isPermaLink="true">http://www.darrenmothersele.com//blog/2013/11/22/sending-base64-encoded-data-poco-net-openframeworks/</guid>
                        </item>
                
                        <item>
                                <title>Nature of openFrameworks (part 1)</title>
                                <description>&lt;p&gt;The excellent, self-published, book &lt;a href=&quot;http://natureofcode.com/&quot;&gt;
The Nature of Code&lt;/a&gt; by Daniel Shiffman gives a solid foundation for
understanding the mathematical principles behind our physical world. There
are loads of great examples that show programming techniques for simulating
the natural world in code.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;The book is written to target Processing, a popular Java based creative
coding framework. Because I prefer C++, and in order to familiarise myself
more with openFrameworks, I&amp;#39;ve been converting some of the examples to work
in openFrameworks. Here are some of the early examples, I may post more,
but I&amp;#39;ve started looking at Cinder too, so in future I may convert some examples to
Cinder instead.&lt;/p&gt;

&lt;p&gt;Click each title to access the code on Gist:&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://gist.github.com/darrenmothersele/6934845&quot;&gt;Random Walker&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This is the first example from the introduction. It just moves a point around
the screen randomly. There is no &lt;code&gt;point()&lt;/code&gt; method in openFrameworks so to draw
a single pixel we just draw a 1x1 rectangle.&lt;/p&gt;

&lt;p&gt;The App class just needs a variable to store an instance of the Walker:&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;step()&lt;/code&gt; and &lt;code&gt;display()&lt;/code&gt; methods are both called from within Processing&amp;#39;s
draw loop, but in openFrameworks we use the &lt;code&gt;update()&lt;/code&gt; method to update state
separately from the draw loop.&lt;/p&gt;

&lt;p&gt;Finally, the main file to launch the openFrameworks app.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://gist.github.com/darrenmothersele/7875888&quot;&gt;Random number distribution&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This example shows how random numbers are evenly distributed.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s no method for finding the array length in C++ so we hard code the
length of the array used to store the count of the generated random numbers.
You can find the length of a simple array (not an array of pointers) using
the &lt;code&gt;sizeof()&lt;/code&gt; function, by dividing the size of the array by the size of
each element, like this: &lt;code&gt;(sizeof(a)/sizeof(*a))&lt;/code&gt; or preferably use a container
class like std::vector which will be covered later.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://gist.github.com/darrenmothersele/7875908&quot;&gt;Gaussian distribution&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;In Processing you have to clear the screen each time in the draw loop, but
openFrameworks does this for you by default. To disable this you add a call
to &lt;code&gt;ofSetBackgroundAuto(false)&lt;/code&gt; in setup. To create the alpha background
effect I draw a rectangle over the whole screen area. Here&amp;#39;s a version that
uses a complete random distribution:&lt;/p&gt;

&lt;p&gt;And here is a version using a Gaussian distribution. openFrameworks doesn&amp;#39;t have
the Gaussian function is in the Random utility class in Processing, so we have
to specify a function to calculate the next Gaussian number:&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://gist.github.com/darrenmothersele/7875928&quot;&gt;Custom distribution (Monte Carlo)&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Here&amp;#39;s an example that demonstrates a custom distribution.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://gist.github.com/darrenmothersele/7875942&quot;&gt;Perlin Noise&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ofNoise&lt;/code&gt; is the openFrameworks equivalent of Processing&amp;#39;s &lt;code&gt;noise()&lt;/code&gt; function.
It returns a float between 0 and 1. openFrameworks also has an equivalent of
map function (&lt;code&gt;ofMap&lt;/code&gt;) that maps the noise value (which is 0 - 1) to the
range 0 - height.&lt;/p&gt;
</description>
                                <pubDate>Fri, 11 Oct 2013 00:00:00 +0100</pubDate>
                                <link>http://www.darrenmothersele.com//blog/2013/10/11/nature-of-openframeworks/</link>
                                <guid isPermaLink="true">http://www.darrenmothersele.com//blog/2013/10/11/nature-of-openframeworks/</guid>
                        </item>
                
        </channel>
</rss>
