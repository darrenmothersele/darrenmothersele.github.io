<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> - Drupal Planet Feed</title>
    <description>Darren Mothersele's Drupal Planet Feed</description>
    <link>http://www.darrenmothersele.com</link>
    <atom:link href="http://www.darrenmothersele.com/drupal-planet.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>How to do Everything with PHP Middleware (DrupalCamp London)</title>
        <description>&lt;p&gt;At the DrupalCamp in London earlier this month I gave a talk 
about PHP Middleware. 
You can see a &lt;a href=&quot;https://www.youtube.com/watch?v=I0pXXCQdHQM&quot;&gt;recording of the talk&lt;/a&gt; 
on YouTube. Here’s a summary, in case you don’t want to watch 
the whole talk, or the distorted audio upsets you, or if you 
want the links and references:&lt;/p&gt;

&lt;h2 id=&quot;simple-vs-easy&quot;&gt;Simple vs Easy&lt;/h2&gt;

&lt;p&gt;I started with a reference to the important talk by Rich Hickey, 
&lt;a href=&quot;https://www.infoq.com/presentations/Simple-Made-Easy&quot;&gt;Simple Made Easy&lt;/a&gt;.
This is high up on my list of videos every software developer needs to watch.
I began here because I think it’s important to identify the difference
between &lt;em&gt;simple&lt;/em&gt; and &lt;em&gt;easy&lt;/em&gt;, to identify where complexity sneaks into our 
systems. I have found PHP Middleware to be an important tool in 
the fight against complexity.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“programming, when stripped of all its circumstantial irrelevancies, boils 
down to no more and no less than very effective thinking so as to avoid 
unmastered complexity, to very vigorous separation of your many different concerns.&lt;/p&gt;

  &lt;p&gt;– &lt;a href=&quot;https://www.cs.utexas.edu/users/EWD/transcriptions/EWD05xx/EWD512.html&quot;&gt;Edsgar W. Dijkstra&lt;/a&gt; (1930 - 2002)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;de-complecting-php&quot;&gt;De-complecting PHP&lt;/h2&gt;

&lt;p&gt;I talked a bit about different ways to simplify development with PHP.
Including: Domain-driven design, Hexagonal architecture (Ports and 
Adapters), Framework-independent code, Thin APIs, etc…
In particular, I wanted to emphasise the importance of framework-independent
code and the benefit of using common interfaces such as the ones developed
as PSRs by &lt;a href=&quot;http://www.php-fig.org/&quot;&gt;PHP-FIG&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There was some discussion after about introducing unecessary abstractions,
but I think this misses the point. Of course there is a trade off, but the
key is to focus on the simplicity, on &lt;em&gt;untwisting&lt;/em&gt; things (c.f. Rich Hickey).&lt;/p&gt;

&lt;h2 id=&quot;de-coupled&quot;&gt;De-coupled&lt;/h2&gt;

&lt;p&gt;Inspired by the &lt;a href=&quot;https://docs.zendframework.com/zend-expressive/&quot;&gt;Zend Expressive&lt;/a&gt;
installation procedure, I imagined what Drupal 10 might look like, with 
fully-decoupled components.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.darrenmothersele.com/img/drupal-x-installer.jpg&quot; alt=&quot;Drupal Install&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;interfaces&quot;&gt;Interfaces&lt;/h2&gt;

&lt;p&gt;The widespread adoption of PSR7 by the PHP community has lead to the 
popularity of PHP Middleware-based systems.&lt;/p&gt;

&lt;p&gt;Why PSR7 when Symfony HTTP components were so popular?
Well, that is an implementation - and rather than standardise on 
implementation, we should standardise against interfaces.&lt;/p&gt;

&lt;p&gt;This allows more interoperability. I showed this &lt;strong&gt;pseudocode&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Take the incoming request from Diactoros
$request = ServerRequestFactory::fromGlobals();

$client = new Client();

// Response comes back from Guzzle
$response = $client-&amp;gt;send($request-&amp;gt;withUrl($dest));

$body  = simplexml_load_string(
$response-&amp;gt;getBody()-&amp;gt;getContents());

// pass back to Diactoros
(new SapiEmitter)-&amp;gt;emit($response-&amp;gt;withBody($body));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The example uses HTTP requests from 
&lt;a href=&quot;https://github.com/zendframework/zend-diactoros&quot;&gt;Zend Diactoros&lt;/a&gt;,
forwards them using the &lt;a href=&quot;http://guzzle.readthedocs.io/en/latest/&quot;&gt;Guzzle&lt;/a&gt;
HTTP client, and returns the response object from Guzzle
using the SAPI Emitter from Diactoros.&lt;/p&gt;

&lt;p&gt;This demonstrates the power of sharing standard interfaces.
Here two packages are used together, both provide
an implementation of PSR7 HTTP messages, and they
work seamlessly because they both conform to the same interface,
despite the differing implementation details.&lt;/p&gt;

&lt;h2 id=&quot;decorating-web-apps&quot;&gt;Decorating Web Apps&lt;/h2&gt;

&lt;p&gt;This is what a typical web app looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.darrenmothersele.com/img/ball-of-mud.jpg&quot; alt=&quot;Ball of Mud&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Which can be simplified to this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.darrenmothersele.com/img/web-app-1.png&quot; alt=&quot;Web App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A web app takes a request and returns a response.&lt;/p&gt;

&lt;p&gt;The concept behind PHP Middleware is that you can &lt;em&gt;decorate&lt;/em&gt;
the app, to add new functionality, by intercepting the request
on the way in, and the response on the way out.
This avoids the complexity of &lt;em&gt;intertwining&lt;/em&gt; your code
throughout the ball of mud.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.darrenmothersele.com/img/web-app-2.png&quot; alt=&quot;Web App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s an example (pseudocode) for adding CORS 
functionality to an existing app:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
$cors = analyze($request);
switch ($cors-&amp;gt;getRequestType()) {
    Case ERR_NO_HOST_HEADER:
    Case ERR_ORIGIN_NOT_ALLOWED:
    Case ERR_METHOD_NOT_SUPPORTED:
    Case ERR_HEADERS_NOT_SUPPORTED:
        Return createResponse(403);

    Case TYPE_REQUEST_OUT_OF_CORS_SCOPE:
        return $APP-&amp;gt;process($request);

    Case TYPE_PRE_FLIGHT_REQUEST:
        $response = Utils\Factory::createResponse(200);
        Return $response-&amp;gt;withHeaders($cors-&amp;gt;getHeaders);

    default:
        $response = $APP-&amp;gt;process($request);
        Return $response-&amp;gt;withHeaders($cors-&amp;gt;getHeaders);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://stackphp.com/&quot;&gt;StackPHP&lt;/a&gt; first popularised the concept of middleware
in PHP. This diagram is from their website:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.darrenmothersele.com/img/onion.png&quot; alt=&quot;Web App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are other popular micro-frameworks based on this concept,
such as &lt;a href=&quot;https://www.slimframework.com/&quot;&gt;Slim&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The core of your app is just a thin layer of business logic. 
Just your domain specific code. The rest can be wrapped in layers
which isolate and separate concerns nicely.&lt;/p&gt;

&lt;h2 id=&quot;single-pass-vs-double-pass&quot;&gt;Single-pass vs Double-pass&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;double pass&lt;/em&gt; approach became the most popularly used
signature for HTTP middleware, based on
&lt;a href=&quot;http://expressjs.com/en/guide/writing-middleware.html&quot;&gt;Express middleware&lt;/a&gt;
from the JS community.&lt;/p&gt;

&lt;p&gt;It looks like this:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// DOUBLE PASS
function __invoke($request, $response, $next) {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The request and the response are both passed into the middleware,
along with a &lt;code class=&quot;highlighter-rouge&quot;&gt;$next&lt;/code&gt; delegate that is called to pass
control and carry on processing down the chain of middleware.&lt;/p&gt;

&lt;p&gt;This double-pass approach is much newer, but 
used by most of the early adopters of PSR-7.&lt;/p&gt;

&lt;p&gt;A single pass approach, looks like this:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// SINGLE PASS / LAMBDA
function process($request, $delegate) {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The issue is with how the response object is dealt with.
In the double-pass approach, both are provided. 
The argument is that this is better for dependency 
inversion. Using the single pass approach you either
need to hard code a dependency on a HTTP message 
implementation into your middleware when the response
is required, or you need to inject a factory for
generating the response.&lt;/p&gt;

&lt;h2 id=&quot;psr-15-http-middleware&quot;&gt;PSR-15 HTTP Middleware&lt;/h2&gt;

&lt;p&gt;After the success of PSR7, with it’s wide adoption leading to
much standardisation and interoperability in PHP frameworks,
the next step is to standardise the middleware interface.&lt;/p&gt;

&lt;p&gt;This is not yet an accepted PSR. At the time of writing 
it is still in &lt;strong&gt;draft&lt;/strong&gt; status.
It is available for use in the 
&lt;a href=&quot;https://github.com/http-interop/http-middleware&quot;&gt;http-interop/http-middleware&lt;/a&gt; repo.&lt;/p&gt;

&lt;h2 id=&quot;invoker&quot;&gt;Invoker&lt;/h2&gt;

&lt;p&gt;As an aside, I mentioned the &lt;a href=&quot;https://github.com/PHP-DI/Invoker&quot;&gt;Invoker Interface&lt;/a&gt;.
As per the docs:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Who doesn’t need an over-engineered call_user_func()?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In particular this library really simplifies the process
of calling things and injecting dependencies. 
It also allows to call things using named parameters.
I make extensive use of this, and I find making calls with 
named parameters makes code much easier to understand.&lt;/p&gt;

&lt;h2 id=&quot;psr-15-interfaces&quot;&gt;PSR-15 Interfaces&lt;/h2&gt;

&lt;p&gt;PSR-15 has two interfaces. Both define a method called &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt;.
One is the signature that middleware must support, which takes
a PSR7 request and a PSR15 delegate. The other interface defines
the &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt; method for the delegate. The method on both
interfaces is defined as returning a PSR7 response.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.darrenmothersele.com/img/psr-15.png&quot; alt=&quot;Web App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So you can compose a chain of middleware, pass in a request
and get a response. The request is passed down the chain of 
middleware until a response is generated which is then passed
back up the chain, possibly being decorated along the way.&lt;/p&gt;

&lt;p&gt;For want of a better name, I refer to this chain of middleware
as a &lt;em&gt;stack&lt;/em&gt;. And, I have created a simple 
&lt;a href=&quot;https://github.com/ideationnet/stack-runner&quot;&gt;Stack Runner&lt;/a&gt; to 
handle the processing of a stack of PSR-15 middleware.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class StackRunner implements DelegateInterface
{
    public function __construct(
   array $stack,
        InvokerInterface $invoker,
        ResponseFactoryInterface $responseFactory
    ) { ... }

    public function process(ServerRequestInterface $request)
    {
        if (!isset($this-&amp;gt;stack[$this-&amp;gt;current])) {
            return $this-&amp;gt;responseFactory-&amp;gt;createResponse();
        }
        $middleware = $this-&amp;gt;stack[$this-&amp;gt;current];
        $this-&amp;gt;current++;

        return $this-&amp;gt;invoker-&amp;gt;call([$middleware, 'process'], [
            'request' =&amp;gt; $request,
            'delegate' =&amp;gt; $this,
        ]);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;adr-action-domain-responder&quot;&gt;ADR (Action Domain Responder)&lt;/h2&gt;

&lt;p&gt;I went on to talk about ADR as being an adaptation of MVC that
is more suitable for use in Web Apps.
I’ve found this particularly useful when using Domain-Driven Design,
or when used to create &lt;em&gt;thin APIs&lt;/em&gt; where you
have just a thin layer of business logic on top of a data store.&lt;/p&gt;

&lt;p&gt;The issue with MVC is that the template is not the view. 
The &lt;em&gt;“view”&lt;/em&gt; of a web app is the HTTP response, and we split this
across our layers, as the body of the response is typically generated
by the view, with the knowledge of HTTP being encoded into our controllers.
We also bundle together various actions into one controller, which 
means instantiating the whole thing when we want to run one of the actions.&lt;/p&gt;

&lt;p&gt;ADR offers an alternative separation of concerns, where the
action methods of the controller are their own separate classes 
(or in my case anything &lt;em&gt;invokable&lt;/em&gt; via the &lt;code class=&quot;highlighter-rouge&quot;&gt;InvokerInterface&lt;/code&gt;).
I use an &lt;code class=&quot;highlighter-rouge&quot;&gt;InputHandler&lt;/code&gt; to deal with parsing the input from the HTTP Request, 
which the Invoker can then use (via the magic of named arguments).&lt;/p&gt;

&lt;p&gt;The domain (Model in MVC terminology) is where the business logic lives.
This is called domain, rather than model, to suggest use of
domain-driven design.&lt;/p&gt;

&lt;p&gt;To use ADR with PHP Middleware, add a &lt;em&gt;resolver&lt;/em&gt; to the end of the
chain of middleware to &lt;em&gt;dispatch&lt;/em&gt; the request to the appropriate 
&lt;code class=&quot;highlighter-rouge&quot;&gt;Action&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.darrenmothersele.com/img/radr.png&quot; alt=&quot;Web App&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;action&quot;&gt;Action&lt;/h2&gt;

&lt;p&gt;I’ve created a reference implementation of an &lt;em&gt;invokable&lt;/em&gt;
&lt;a href=&quot;https://github.com/ideationnet/wafer/blob/master/src/Action.php&quot;&gt;Action&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.darrenmothersele.com/img/action.png&quot; alt=&quot;Web App&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;demo&quot;&gt;Demo!&lt;/h2&gt;

&lt;p&gt;At this point in my talk I planned to give a demo of 
how you compose ADR with Middleware to create a working API.
Unfortunately, I had some tech issues getting my computer linked
up to the projector, and I was starting to feel really ill (full of 
cold). By this time the caffeine was starting to wear off, and 
I needed the talk to end!&lt;/p&gt;

&lt;p&gt;I’ve put the example code up in a 
&lt;a href=&quot;https://github.com/darrenmothersele/dcldn2017&quot;&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/Simple-Made-Easy&quot;&gt;Simple Made Easy&lt;/a&gt; - talk by Rich Hickey&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/http-interop/http-middleware&quot;&gt;HTTP Middleware&lt;/a&gt; and
&lt;a href=&quot;https://github.com/http-interop/http-factory&quot;&gt;HTTP Factory&lt;/a&gt; interfaces.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/middlewares/psr15-middlewares&quot;&gt;PSR15 Middlewares&lt;/a&gt; a
set of really useful middlewares that can be used with a PSR15 middleware 
dispatcher.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ideationnet/stack-runner&quot;&gt;Stack Runner&lt;/a&gt; 
my reference implementation of a &lt;em&gt;very&lt;/em&gt; simple stack runner for executing
a chain of PSR15 middleware.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ideationnet/wafer&quot;&gt;Wafer&lt;/a&gt; an experimental implementation
of the ADR idea to be used along with PSR15 middleware and the stack runner.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Drop me a line with any feedback. Thanks!&lt;/p&gt;

</description>
        <pubDate>Tue, 28 Mar 2017 10:30:00 +0100</pubDate>
        <link>http://www.darrenmothersele.com//blog/2017/03/28/php-middleware/</link>
        <guid isPermaLink="true">http://www.darrenmothersele.com//blog/2017/03/28/php-middleware/</guid>
      </item>
    
      <item>
        <title>PHP Framework in One Weekend</title>
        <description>&lt;p&gt;&lt;b&gt;UPDATE: Now available in paperback from &lt;a href=&quot;http://amzn.to/2bNv560&quot;&gt;Amazon&lt;/a&gt; and other online retailers.
The eBook is available on &lt;a href=&quot;https://leanpub.com/phpframework&quot;&gt;Leanpub&lt;/a&gt;.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Earlier this year I set about creating a day of training for 
DrupalCamp London. It was based on a PHP Framework
course I’d given, but reduced to fit into a day. 
We ended up focusing on Modern PHP, as that was most useful for the
attendees in their transition from Drupal 7 to Drupal 8.&lt;/p&gt;

&lt;p&gt;It was a really successful day, and I had some great feedback. 
I have since developed the idea into a two day training course,
which looks at some of the core concepts behind most modern PHP apps.&lt;/p&gt;

&lt;p&gt;Over the past couple of months I have worked hard to refine the 
content and edit it down into a short guide. I’ve released it
(thanks to &lt;a href=&quot;https://leanpub.com/phpframework&quot;&gt;Leanpub&lt;/a&gt;)
in the form of a book. It guides the reader through a 
weekend-long project to construct a simple PHP web framework.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“a weekend, the fundamental unit of coding self-improvement” 
- Peter Shirley&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In particular, it uses Symfony Components, and some other popular
PHP packages, to demonstrate the core features of
web frameworks, like routing, templating, controllers, and 
dependency injection. Projects such as Drupal, phpBB, Laravel, eZ Publish, Joomla!, Magento, Piwik, and many more are using Symfony Components as a foundation on which to build. The book uses these, and more, to build our own PHP Framework
in a weekend.&lt;/p&gt;

&lt;p&gt;Here’s the full contents:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Getting Started&lt;/li&gt;
  &lt;li&gt;Managing Complexity&lt;/li&gt;
  &lt;li&gt;Testing&lt;/li&gt;
  &lt;li&gt;HTTP&lt;/li&gt;
  &lt;li&gt;Templating&lt;/li&gt;
  &lt;li&gt;Content&lt;/li&gt;
  &lt;li&gt;Routing&lt;/li&gt;
  &lt;li&gt;Controllers&lt;/li&gt;
  &lt;li&gt;Dependency Injection&lt;/li&gt;
  &lt;li&gt;Design and Layout&lt;/li&gt;
  &lt;li&gt;Reuse&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Click the cover image below to get the book:&lt;/p&gt;

&lt;div&gt;&lt;a href=&quot;https://leanpub.com/phpframework&quot;&gt;
&lt;img src=&quot;/img/phpframework-book.png&quot; alt=&quot;PHP Framework in One Weekend&quot; /&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Drop me a line if you have any questions.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Jun 2016 13:30:00 +0100</pubDate>
        <link>http://www.darrenmothersele.com//blog/2016/06/16/php-framework-weekend/</link>
        <guid isPermaLink="true">http://www.darrenmothersele.com//blog/2016/06/16/php-framework-weekend/</guid>
      </item>
    
      <item>
        <title>Build Your Own PHP Framework at DrupalCamp London</title>
        <description>&lt;p&gt;I have revised and improved the training in preparation for DrupalCamp next week. I’ve incorporated some feedback, added a bit of theory, and included more practical examples. Join me and level up your PHP development skills in this 1 day course.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Build Your Own PHP Framework.&lt;/p&gt;

&lt;p&gt;Learn modern PHP practices and see the benefits first hand via practical examples. Learn object oriented design and how to apply design patterns.&lt;/p&gt;

&lt;p&gt;There’s a lot of old PHP code and information around on the web. With the massive improvements in PHP in recent years, a lot of this information is wrong and out of date. In this course I will be focusing on only modern, state of the art PHP.&lt;/p&gt;

&lt;p&gt;Moving from Drupal 7 to Drupal 8 means adopting modern, object-oriented, PHP practices. Drupal 8 has gone through a process of “getting off the island” and embracing the wider PHP ecosystem. We, as PHP developers using Drupal, can improve our own processes by doing the same.&lt;/p&gt;

&lt;p&gt;Building your own framework is a great way to learn the fundamentals of modern PHP. Regardless of your choice of framework, this will make you a better developer. A similar foundation of components underlies Drupal, Symfony, Silex, and Lavavel.&lt;/p&gt;

&lt;p&gt;Details:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Learn framework decoupling techniques.&lt;/li&gt;
  &lt;li&gt;Write better code by avoiding unnecessary complexity.&lt;/li&gt;
  &lt;li&gt;Use Domain Driven Design to tackle complexity and design better solutions.&lt;/li&gt;
  &lt;li&gt;Go beyond MVC and start to explore other design patterns such as command bus and repositories.&lt;/li&gt;
  &lt;li&gt;Learn simple strategies you can immediately apply to develop better code.&lt;/li&gt;
  &lt;li&gt;Understand the components at the core of Drupal 8, many other PHP frameworks and popular PHP apps.&lt;/li&gt;
  &lt;li&gt;Digestible 40 minute sections interspersed with practical workshop where you get hands-on experience.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will need a basic knowledge of PHP and a laptop that can run PHP. You will leave with a better understanding of the principles behind modern PHP and Drupal 8.&lt;/p&gt;

&lt;h3 id=&quot;tickets-available-here&quot;&gt;&lt;a href=&quot;https://events.r20.constantcontact.com/register/eventReg?oeidk=a07ebt79sow1ef68cab&amp;amp;oseq=&amp;amp;c=&amp;amp;ch=&quot;&gt;Tickets available here&lt;/a&gt;.&lt;/h3&gt;

&lt;p&gt;£295.00 or
£95.00 concession tickets for sole traders, students and charities.
The training will be on Friday March 4, 2016 at City University London.&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Feb 2016 10:30:00 +0000</pubDate>
        <link>http://www.darrenmothersele.com//blog/2016/02/25/php-training-at-drupalcamp-london/</link>
        <guid isPermaLink="true">http://www.darrenmothersele.com//blog/2016/02/25/php-training-at-drupalcamp-london/</guid>
      </item>
    
      <item>
        <title>Build Your Own PHP Framework</title>
        <description>&lt;p&gt;I’m excited to announce that I’ll be back running training at this year’s Drupal Camp in London. This will be the 3rd year in a row that I’ve offered training at the camp. I’m doing something a bit different this time…&lt;/p&gt;

&lt;!--break--&gt;

&lt;h2 id=&quot;build-your-own-php-framework&quot;&gt;Build Your Own PHP Framework&lt;/h2&gt;

&lt;p&gt;In this training you will build your own PHP framework.&lt;/p&gt;

&lt;p&gt;But, why reinvent the wheel?&lt;/p&gt;

&lt;p&gt;Building your own framework is a great way to learn the fundamentals of modern PHP. Regardless of your choice of framework, this will make you a better developer. A similar foundation of components underlies Drupal, Symfony, Silex, and Lavavel.&lt;/p&gt;

&lt;p&gt;If you are a developer going from Drupal 7 to Drupal 8 then you need to adopt an object-oriented mindset.&lt;/p&gt;

&lt;p&gt;Drupal doesn’t always get it right. If you understand the basic principles you know when and why you’re breaking them. You can make pragmatic choices as a programmer, without embodying bad practices.&lt;/p&gt;

&lt;p&gt;“Build Your Own Framework” is a fun training to learn modern PHP. You will learn the “SOLID” principles of PHP package design. The training will demystify dependency injection, hexagonal architecture and other design patterns. We will look at HTTP Foundation and the other Symfony components.&lt;/p&gt;

&lt;p&gt;Come armed with a basic knowledge of PHP, a laptop that can run PHP, and an open mind. Leave with a better understanding of the principles behind modern PHP and Drupal 8.&lt;/p&gt;

&lt;h3 id=&quot;tickets-available-here&quot;&gt;&lt;a href=&quot;https://events.r20.constantcontact.com/register/eventReg?oeidk=a07ebt79sow1ef68cab&amp;amp;oseq=&amp;amp;c=&amp;amp;ch=&quot;&gt;Tickets available here&lt;/a&gt;.&lt;/h3&gt;

&lt;p&gt;The training will be held on Friday March 4, 2016 at City University London.&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Feb 2016 17:00:00 +0000</pubDate>
        <link>http://www.darrenmothersele.com//blog/2016/02/11/drupal-camp-london-training/</link>
        <guid isPermaLink="true">http://www.darrenmothersele.com//blog/2016/02/11/drupal-camp-london-training/</guid>
      </item>
    
      <item>
        <title>Drupal Predictions for 2016</title>
        <description>&lt;p&gt;This will be a momentus year for Drupal.&lt;/p&gt;

&lt;p&gt;David H, Drupal.org webmaster, was
&lt;a href=&quot;https://twitter.com/FromWayDowntown/status/692375858175148032&quot;&gt;soliciting responses&lt;/a&gt;
to &lt;a href=&quot;https://www.drupal.org/node/2652402&quot;&gt;this thread&lt;/a&gt; on Twitter.
I kept my &lt;a href=&quot;https://www.drupal.org/node/2652402#comment-10792382&quot;&gt;predictions&lt;/a&gt;
brief, but thought I would post here to elaborate.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Some people may be predicting &lt;a href=&quot;https://securityintelligence.com/news/new-year-new-problems-cms-vulnerabilites-take-on-2016/&quot;&gt;a year of security vulnerabilities&lt;/a&gt;. I believe we have a
year of innovation ahead of us.&lt;/p&gt;

&lt;p&gt;Drupal’s ecosystem of contributed modules is playing catch-up since the
release of version 8. It has been years since CCK and Views were just
experiments in the contrib module space.
They are now established as foundation of Drupal core.
Contrib (the wider community of Drupal developers) can now get back to innovating.&lt;/p&gt;

&lt;p&gt;“Get back to innovating” isn’t much of a prediction. I thought about it
some more and came up with three things I think are likely to happen in 2016…&lt;/p&gt;

&lt;h2 id=&quot;cms-as-a-service&quot;&gt;CMS-as-a-Service&lt;/h2&gt;

&lt;p&gt;The era of the monolythic, does-it-all, CMS is coming to an end.
The Drupal community talk a lot about &lt;em&gt;progressive decoupling&lt;/em&gt;
&lt;a href=&quot;http://buytaert.net/should-we-decouple-drupal-with-a-client-side-framework&quot;&gt;[1]&lt;/a&gt;
&lt;a href=&quot;http://buytaert.net/selecting-a-client-side-framework-for-drupal&quot;&gt;[2]&lt;/a&gt;.
But, the idea of a &lt;em&gt;fully decoupled&lt;/em&gt; backend is becoming established
in other areas. Services like &lt;a href=&quot;https://www.contentful.com/&quot;&gt;Contentful&lt;/a&gt; already
provide a fully decoupled, headless CMS.&lt;/p&gt;

&lt;p&gt;Systems become decoupled, we move to a microservice architecture, and evaluate server-less options. It is conceivable that a Content API could become part of the infrastructure. Amazon are the leading Infrastructure-as-a-Service provider. A Content API (or CMS-as-a-Service) would fit in their suite of cloud computing services.&lt;/p&gt;

&lt;p&gt;I did an experiment recently where I put Amazon’s API Gateway in front of an EC2 instance running Drupal. This gives a more robust API on top of Drupal 8’s Rest support. Monitoring, traffic management, and flexible security controls are standard.
This approach offers several advantages, including: &lt;a href=&quot;http://swagger.io/&quot;&gt;Swagger&lt;/a&gt; support;
CloudFront caching for performance; and input/output
translation with data models defined with JSON schema.&lt;/p&gt;

&lt;h2 id=&quot;acquia-ipo&quot;&gt;Acquia IPO&lt;/h2&gt;

&lt;p&gt;Going public was always on the cards for Acquia, but they said they
&lt;a href=&quot;http://bostinno.streetwise.co/2015/10/21/acquia-engage-ceo-talks-content-hub-valuation-ipo/&quot;&gt;are in no rush to IPO&lt;/a&gt;. This could be the year. Adoption of D8 will being changes
to the user base and continued adoption at the enterprise level.&lt;/p&gt;

&lt;p&gt;This will be accompanied by more consolidation in the Drupal world.
One of the biggest risks I see is with Drupal companies taking on
bigger projects. A single client becomes a large contributer to their
revenue, in some cases I’ve heard as much as 70%. This is a risky situation
to be in, if you rely on one client for a majority of your business.
The solution is for Drupal companies to come together to form larger entities.&lt;/p&gt;

&lt;p&gt;This is just a continuation of an existing trend.
&lt;a href=&quot;http://www.wunderkraut.com/blog/worlds-largest-drupal-provider-created-by-merger/2012-08-20&quot;&gt;Wunderkraut&lt;/a&gt;,
was the most high-profile merger in the community.
Followed by many more, involving companies such as
&lt;a href=&quot;http://wearepropeople.com/news/propeople-and-blink-reaction-come-together-to-form-ffw-a-new-global-digital-agency&quot;&gt;FFW&lt;/a&gt;,
&lt;a href=&quot;http://www.mediacurrent.com/blog/mediacurrent-acquired-by-code-and-theory&quot;&gt;MediaCurrent&lt;/a&gt;,
&lt;a href=&quot;https://www.phase2technology.com/blog/phase2-and-opensourcery-whats-new-in-portland/&quot;&gt;Phase2&lt;/a&gt;, and
&lt;a href=&quot;http://i-kos.com/press-release/2014-09-22/mogdesign-joins-ikos-digital-accelerate-drupal-growth&quot;&gt;i-Kos&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;composer-support-and-decoupled-components&quot;&gt;Composer Support and Decoupled Components&lt;/h2&gt;

&lt;p&gt;Composer support in Drupal needs some work.
There are some big wins to be had by embracing the
Composer (and Packagist) workflow.&lt;/p&gt;

&lt;p&gt;Commerce Guys are leading the way with Drupal Commerce. They have been
&lt;a href=&quot;https://github.com/commerceguys&quot;&gt;factoring out components into separate libraries&lt;/a&gt;.
Other PHP projects beyond Drupal are making use of them, and contributing to
their development.
Expect more contrib projects to factor out separate PHP packages of re-usable code.
Then Drupal modules become just a thin layer of glue.&lt;/p&gt;

&lt;p&gt;There has been a trend for PHP Frameworks to decouple their core components.
The Symfony Components split from the full stack framework has
meant much wider adoption. They are used in &lt;a href=&quot;http://symfony.com/projects&quot;&gt;many PHP projects&lt;/a&gt;,
including Drupal.&lt;/p&gt;

&lt;p&gt;PHP-FIG exists to promote interoperability between frameworks. This year will see further initiatives to clean up Drupal’s code. Such as, removal of anti-patterns like service locator. The eventual aim will be to decoupling components from Drupal core.&lt;/p&gt;

&lt;p&gt;Can you imagine using Views on a non-drupal project?&lt;/p&gt;

</description>
        <pubDate>Thu, 28 Jan 2016 14:00:00 +0000</pubDate>
        <link>http://www.darrenmothersele.com//blog/2016/01/28/drupal-predictions/</link>
        <guid isPermaLink="true">http://www.darrenmothersele.com//blog/2016/01/28/drupal-predictions/</guid>
      </item>
    
      <item>
        <title>Session submission guidelines for conferences and camps</title>
        <description>&lt;p&gt;Earlier this week I found out that the date for my nephew’s christening has changed. This means I can now make it to the Drupal Camp in London. I decided to propose a session so that I can share my recent insights, research, and learning.&lt;/p&gt;

&lt;p&gt;The Drupal Camp London team have kept the session submission process minimal. This makes it easy for people to submit proposals, but it makes it unclear what the expectations are. What are they looking for in proposed sessions? How long are the sessions expected to be? What is the review process?&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;As I only found out I could attend at the last minute, I had no time to enquire about the process. So I made some assumptions based on my experiences of programming at previous camps. I also did some research into other Drupal camp and conference session submission processes.
The &lt;a href=&quot;https://amsterdam2014.drupal.org/news/session-selection-drupalcon-inside-out.html&quot;&gt;Amsterdam Drupalcon site&lt;/a&gt; had this to say:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“There’s a lot of elements to session selection. We need to make sure that sessions are of value to a wide audience. The presenters must be engaging speakers who can interest a large crowd of attendees. We try as hard as we can to bring in new (to DrupalCon) speakers, and speakers who bring something from outside of the Drupal sphere. We want to make sure that the diversity of the community is represented and encouraged. And we need to work across track teams to ensure that one speaker is not speaking in several tracks; both for the sake of their stress and sanity in preparing the talks and to ensure that everyone who applied has the best chance of speaking. Finally, we need to make sure that sessions fit both the theme of the track and of the conference.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While the &lt;a href=&quot;https://events.drupal.org/barcelona2015/session-submission-live&quot;&gt;Barcelona Drupalcon&lt;/a&gt; offered the following 3 part session submission formula…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Part 1: Describe a compelling topic that affects the reader directly, maybe a pain point, or juicy new technology. &lt;br /&gt;
Part 2: Allude to your solution, sharing just enough that the reader has a moment of “I need that …how do I not know this already?” &lt;br /&gt;
Part 3: Explain how awesome the session will be because you are going to cover “XYZ” and make the reader’s life so much better.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;my-session-selection-criteria&quot;&gt;My session selection criteria&lt;/h2&gt;

&lt;p&gt;I realised that I’ve done session selection myself many times. At every conference, camp, and symposium I attend I make my own selection of sessions to attend. The key to making the most out of attending a conference is to attend the right sessions.&lt;/p&gt;

&lt;p&gt;At Resonate last year I set the intention of broadening my horizons, so intentionally selected session that I would not normally be exposed to. And sessions that offered something new. At DrupalCon in Amsterdam I set the intension of getting as deep into Drupal 8 as possible. So I attended every D8 session I could. Selecting the sessions I thought offered the most opportunity for learning. It helps if they are recognisable names, or people I’ve seen present before and know they do a good session.&lt;/p&gt;

&lt;p&gt;When I think about my own criteria, I get it down to five things…&lt;/p&gt;

&lt;h3 id=&quot;importance&quot;&gt;Importance&lt;/h3&gt;

&lt;p&gt;Is this definitely a session worth attending? Is the session topic cutting edge, or immediately relevant to my situation. Is it ground breaking or offer a significant contribution to the field?&lt;/p&gt;

&lt;h3 id=&quot;purpose&quot;&gt;Purpose&lt;/h3&gt;

&lt;p&gt;Is this the right type of session? Is the purpose of the session clear? Does the description make it clear what the expected participant outcomes are? Does the description give enough specific information to make me want to know more?&lt;/p&gt;

&lt;h3 id=&quot;motivation&quot;&gt;Motivation&lt;/h3&gt;

&lt;p&gt;Is the session motivated by theory, practice, and/or research? Is this presented in a detailed, thorough, and comprehensible way?&lt;/p&gt;

&lt;h3 id=&quot;substantiated&quot;&gt;Substantiated&lt;/h3&gt;

&lt;p&gt;Are all claims (practices, conclusions, proposals) well substantiated. Is the speaker presenting something they know about? Is the speaker well positioned to be giving the session.&lt;/p&gt;

&lt;h3 id=&quot;clarity&quot;&gt;Clarity&lt;/h3&gt;

&lt;p&gt;Is the session proposal clear? A well written session description indicates the presentation itself will be of professional quality.&lt;/p&gt;

&lt;p&gt;I hope I managed to purvey these five points in my own
&lt;a href=&quot;http://www.darrenmothersele.com/blog/2016/01/21/survive-and-thrive-drupal-8/&quot;&gt;session proposal&lt;/a&gt;. I’d love to hear from you if you have your own ideas about what makes a good Drupalcamp session. If you drop me a line or leave a comment I will take them into account while planning my own session.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Darren&lt;/p&gt;

</description>
        <pubDate>Fri, 22 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://www.darrenmothersele.com//blog/2016/01/22/conference-session-submission-guidelines/</link>
        <guid isPermaLink="true">http://www.darrenmothersele.com//blog/2016/01/22/conference-session-submission-guidelines/</guid>
      </item>
    
      <item>
        <title>Surviving - and thriving - during the transition to Drupal 8</title>
        <description>&lt;p&gt;This is my proposal for a session at the upcoming &lt;a href=&quot;http://drupalcamp.london/&quot;&gt;Drupal Camp in London&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Drupal is going through some big changes. And, so is the world. Now may be an unsettled period, but, times of disturbance can also be times of great opportunity.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;I will share my experiences with Drupal and my research into how the web and society are transforming. This will include my personal manifesto and ideas about Drupal’s role in the future of the web.&lt;/p&gt;

&lt;p&gt;The Drupal community helped me transform in many ways. I have had the opportunity to work on some of the biggest, flagship Drupal websites, and in teams of all sizes. I’ve grown and advanced as a developer and a human.&lt;/p&gt;

&lt;p&gt;There have also been difficult times. These have included my own personal challenges, and stories I have heard from others. In my work at &lt;a href=&quot;http://ideationnetworks.com/&quot;&gt;Ideation Networks&lt;/a&gt; I sit with clients as they weigh up the pros and cons of Drupal. Many organisations feel they have been burnt by Drupal. And, for some, PHP (and by association Drupal) is just not cool.&lt;/p&gt;

&lt;p&gt;But, on the whole, these are exciting times for Drupal.&lt;/p&gt;

&lt;p&gt;Drupal 8 is the biggest achievement of our community to date. The latest version has been completely rewritten to use modern object-oriented PHP. We refer to this process as “getting off the island”. It means dropping the “not invented here” philosophy, and embracing the wider PHP community.&lt;/p&gt;

&lt;p&gt;Drupal as a product, a community, and a movement, is our co-creation.&lt;/p&gt;

&lt;p&gt;We have all played a part in Drupal’s success: Dries and the core development team; the wider community of contributors; the attendees of Drupal camps and conferences; people who talk about Drupal; and the developers, agencies, companies and users that drive Drupal’s adoption.&lt;/p&gt;

&lt;p&gt;In this session I will attempt to answer these questions:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What have we gained, and what have we sacrificed along the way?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;NGOs, charities, smaller organisations, and hobbyists made up Drupal’s traditional user-base. Have we shunned them as we’ve chased the enterprise client and big budget projects? Or, does Drupal 8 bring more of these users back into the fold?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Now that we’ve got this amazing platform, what do we do with it?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Egyptian Revolution of 2011 is just one example of the web enabling real change in the world. How does Drupal fit into the bigger picture? How can we empower more positive change in the world?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Where do we go next? How can Drupal continue to transform and grow?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Everyone is talking about front-end frameworks, progressive decoupling, big pipe, micro-services. Innovation is more than just jumping on bandwagons. Considered from a deeper place, what do these trends tell us about the real changes that are happening? How does Drupal embrace these changes?&lt;/p&gt;

&lt;p&gt;I’m excited. There are some tensions to resolve, and some challenges ahead, but also big opportunities.&lt;/p&gt;

&lt;p&gt;Join me for this session. Let’s explore transformation of our world, the web, Drupal, and ourselves.&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://www.darrenmothersele.com//blog/2016/01/21/survive-and-thrive-drupal-8/</link>
        <guid isPermaLink="true">http://www.darrenmothersele.com//blog/2016/01/21/survive-and-thrive-drupal-8/</guid>
      </item>
    
      <item>
        <title>How to Survive Gentrification of the Drupal Community</title>
        <description>&lt;p&gt;We’re finally approaching the release of
&lt;a href=&quot;https://www.drupal.org/node/2605142&quot;&gt;Drupal 8.0.0 on 19th Nov&lt;/a&gt;. The
biggest achievement of the Drupal community to date. A complete rewrite of the core
system to use modern object-oriented PHP. An effort that is often referred to as
“getting off the island”.&lt;/p&gt;

&lt;p&gt;While the switch from Drupal 7 to Drupal 8 is a big change for developers, it is
the result of a slow process of maturation of the Drupal community. Drupal 8
brings changes that will be welcomed by many, will bring in many new users, and of
course, will push a few people out. How can we survive this “gentrification”
of the Drupal community and prosper without losing touch with why we loved
Drupal in the first place.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;##Gentrification&lt;/p&gt;

&lt;p&gt;Cities all over the world are becoming more exclusive, more expensive, and a
natural result of this is gentrification. It’s contentious. Some see this as
urban improvement, some as social cleansing.&lt;/p&gt;

&lt;p&gt;I moved to London nearly 12 years ago. Dalston, to be precise. I was back in
Dalston this weekend for a party, and it’s very different to how I remember it
from 2004. I compared the nice clean overground train to the unreliable
and dirty Silverlink trains that used to run to Dalston. Then, walking down Kingsland
road without being on guard. When I lived there in 2004 it was often cordoned off by police.
The hipsters, the trendy coffee shops, and other obvious signs of gentrification
proliferate.&lt;/p&gt;

&lt;p&gt;Brixton was my home for many years, and I witnessed first hand the results of gentrification.
I had an office space in Brixton, and decided to
leave it when the landlord announced he was increasing the rent by 25%.
I lived in several flats around Brixton over the years, and eventually moved
(a bit) further south as rental prices in Brixton soared.
I say this with tongue in cheek, well aware that to many I’d be seen as one of
the gentrifiers!
It’s the communities that settled here during the
&lt;a href=&quot;http://www.urban75.org/brixton/history/history.html&quot;&gt;1940s and 1950s&lt;/a&gt;
that gave the area it’s eclectic multi-cultural feel. They’re the ones who
have been displaced, losing their homes and community as developers and “yuppies”
take over.&lt;/p&gt;

&lt;p&gt;##Gentrification of the Drupal Community&lt;/p&gt;

&lt;p&gt;I first used Drupal back in 2003, version 4 point something. It was fun.
Hacky, but fun. I had to quickly get a site up for an event we were organising
and Drupal offered a collaborative content model that set it apart from the
other products we evaluated.&lt;/p&gt;

&lt;p&gt;I came back to Drupal in 2007 for another community site build, and Drupal 5
had been released. It was really fun. Yes, still very hacky, but it came with
the power to build a CMS exactly the way I wanted it to work, and it came with
an awesome community of other hackers. A community of dedicated open-source
types, who valued openness, and working on projects for good. I was hooked and
made the leap to full time Drupal development. Through Drupal
I got involved in the first social innovation camp, and other tech-for-good
type things.&lt;/p&gt;

&lt;p&gt;Szeged 2008 was my first Drupalcon. 500 Drupal contributors and users in a small
university town in Hungary. Everyone I met truly cared about
making Drupal an awesome project and was contributing time and effort in any
way they could. Several years later and Drupalcon have grown. 2000+ attendees in
Barcelona this year, 2300+ in Amsterdam last year. But, as the community has
grown, so has the commercial influence. With sales pitches as prevalent as
learning sessions on the schedule.&lt;/p&gt;

&lt;p&gt;One thing I noticed this year was that several sessions concluded, or included,
a call for donations or funding to accelerate a particular module or project’s
development. The precedent was set in the starting session of the conference when
the Drupal Association made an announcement about the Drupal 8 accelerate
funding programme. I’m not saying this is a bad thing. If this is what it
takes to get Drupal 8 finished in today’s conditions, then that’s great. But,
look at it as an indicator of how the community has changed, when compared to
the sessions at Szeged seven years earlier. You would not have seen a call for
quarter of a million dollar funding back then. Everyone was there because they
loved it, not because they were being paid.&lt;/p&gt;

&lt;p&gt;##Hacking the hackers&lt;/p&gt;

&lt;p&gt;While doing research for this post, I came across this brilliant essay,
&lt;a href=&quot;https://aeon.co/essays/how-yuppies-hacked-the-original-hacker-ethos&quot;&gt;The hacker hacked&lt;/a&gt;,
by Brett Scott about the gentrification of hacker culture. I quote his summary
of the gentrification process:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Key to any gentrification process are successive waves of pioneers who gradually reduce the perceived risk of the form in question. In property gentrification, this starts with the artists and disenchanted dropouts from mainstream society who are drawn to marginalised areas. This, in turn, creates the seeds for certain markets to take root. A WiFi coffeeshop appears next to the Somalian community centre. And that, in turn, sends signals back into the mainstream that the area is slightly less alien than it used to be.
&lt;/p&gt;&lt;p&gt;
If you repeat this cycle enough times, the perceived dangers that keep the property developers and yuppies away gradually erode. Suddenly, the tipping point arrives. Through a myriad of individual actions under no one person’s control, the exotic other suddenly appears within a safe frame: interesting, exciting and cool, but not threatening. It becomes open to a carefree voyeurism, like a tiger being transformed into a zoo animal, and then a picture, and then a tiger-print dress to wear at cocktail parties. Something feels ‘gentrified’ when this shallow aesthetic of tiger takes over from the authentic lived experience of tiger.&lt;br /&gt;
-- Brett Scott&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How does this relate to the Drupal community? Perhaps it starts with the
NGOs and charities, our original flagship Drupal sites, that became our
“artists and disenchanted dropouts from mainstream society”. Then the
big media companies move in as the “perceived dangers gradually erode”.
Eventually, The White House start using Drupal, and we’re at home with the large
enterprise clients and big corporate contracts.&lt;/p&gt;

&lt;p&gt;As the Drupal project developed the requirements changed. Drupal’s capabilities
improve, and the Drupal user base and community advanced too.&lt;/p&gt;

&lt;p&gt;This is evident in the development, and
standardisation of things like configuration management. Something that was
never an issue in the early days, as the community became more professional,
solutions for configuration management were hacked together, and then
became standardised.&lt;/p&gt;

&lt;p&gt;Configuration management is just one example of the many benefits the Drupal
community has experienced through the process of gentrification. There’s also
great test coverage, performance improvements, greater tooling, and many other
advancements that came to Drupal as the community matured. Drupal became less
about hacking and more about software engineering.&lt;/p&gt;

&lt;p&gt;##Drupal 8&lt;/p&gt;

&lt;p&gt;Development on Drupal 8 started in March 2011 and four years later, is to set to
be released on November 19, 2015. Over these years, Drupal has been rewritten,
removing most of the pre-OO era PHP legacy.&lt;/p&gt;

&lt;p&gt;Drupal’s legacy was the “not invented here” mindset that became entrenched in
the community through hacking solutions to extensibility into a language that
was not designed to support it. And, a culture of not depending on third-party
code due to early well publicised security issues with PHP extensions.&lt;/p&gt;

&lt;p&gt;The move away from this legacy, the move to “get off the island”, is a move
towards more standardised, modern, development practises, and a move to
embrace the wider PHP community.&lt;/p&gt;

&lt;p&gt;##Social cleansing&lt;/p&gt;

&lt;p&gt;I mentioned before that gentrification is contentious. For some see it as
urban improvement, some as social cleansing. Drupal and the Drupal community
have clearly benefitted already, and it looks like prosperous times ahead for
those who come along for the ride, and the newcomers who join and adopt Drupal.&lt;/p&gt;

&lt;p&gt;But, what about the social cleansing. Will parts of the community be pushed out?
Who gets left behind?&lt;/p&gt;

&lt;p&gt;Drupal has suffered from an identity crisis. Because of it’s flexibility, it’s
been used for many things. Drupal’s openness to hacking, extending and ability to
do just about anything, meant it was more than just a CMS. Over the years many
talked about “small core”, many used Drupal’s core tools as a Framework, building
apps and tools well beyond what a typical CMS would be used for.&lt;/p&gt;

&lt;p&gt;Drupal 8 is a content management system.&lt;/p&gt;

&lt;p&gt;Drupal 8 focuses on content management, on providing tools for non-technical
users to build and manage sites. &lt;b&gt;That’s what it always wanted to be anyway&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Drupal 8 leverages the wider PHP community, in particular the Symfony
components, as it’s core.  It no longer makes sense to see Drupal as a
framework.&lt;/p&gt;

&lt;p&gt;One of the parts of the community being displaced, are those using
Drupal as a framework. If this is you then you may already be looking at a fork,
like &lt;a href=&quot;https://backdropcms.org/&quot;&gt;Backdrop&lt;/a&gt;, or playing with other frameworks,
like the beautiful &lt;a href=&quot;http://laravel.com/&quot;&gt;Laravel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another section of the community that may be displaced are those running Drupal
on low end and shared hosting. Through the
gentrification process, Drupal’s requirements have increased.
The increased hosting requirements have meant that dedicated Drupal platform
hosting providers have emerged. More options for scalability and custom
software stacks have taken precedent over solutions for smaller websites.&lt;/p&gt;

&lt;p&gt;Drupal also potentially loses the innovators.
Drupal always had a reputation for being cutting edge and innovative.
As it moves to become the enterprise choice of open-source CMS, innovation
becomes less important, and stability, security, and backwards compatibility
become more important. The biggest innovations in Drupal (flexible content
types and Views) date back to the 4.7 era. Views is now in core in Drupal 8.
As Drupal matures further from this point, we’ll probably see Drupal adopting
innovations from other systems and ecosystems, rather than innovating on it’s own.
It’s well placed to do this now, built on Symfony components, innovations
from the wider community will be easier to integrate.&lt;/p&gt;

&lt;p&gt;##Surviving Gentrification&lt;/p&gt;

&lt;blockquote&gt;
Do you abandon the form, leave it to the yuppies and head to the next wild frontier?
Or do you attempt to break the cycle, deface the estate-agent signs,
and picket outside the wine bar with placards reading &quot;Yuppies Go Home&quot;?&lt;br /&gt;
-- Brett Scott
&lt;/blockquote&gt;

&lt;p&gt;Or, do come along for the ride? Enjoy the benefits of gentrification, without
losing the reason why you got involved in the first place?&lt;/p&gt;

&lt;p&gt;If you’re going to stick around then you’re going to need change a few things.
Here’s 5 steps that will get you started:&lt;/p&gt;

&lt;p&gt;###1. Learn the foundations that Drupal is now built on.&lt;/p&gt;

&lt;p&gt;If (like me) you’ve got a background in OO then this shouldn’t be too hard.
I did several years of post-graduate research into semantics and verification
of object-oriented software. You definitely don’t need to go that deep, but I would
highly recommend getting to grips with classic works on
design patterns such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;Gang of Four&lt;/a&gt;
and &lt;a href=&quot;http://martinfowler.com/books/eaa.html&quot;&gt;Martin Fowler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With a basic understanding of the core “patterns” of object-oriented software,
you start to appreciate how Symfony works.&lt;/p&gt;

&lt;p&gt;Drupal, Silex, Laravel, Symfony Full Stack, Symfony CMF, phpBB, Joomla,
Magento, Piwik, PHPUnit, Sonata, and many more projects are built on this same
foundation. So, it’s definitely worth learning, and Drupal can be a good way
to learn it, while still working with a system you know well.&lt;/p&gt;

&lt;p&gt;Try building a simple app with &lt;a href=&quot;http://silex.sensiolabs.org/&quot;&gt;Silex&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href=&quot;https://www.youtube.com/playlist?list=PLpeDXSh4nHjR26Dheb6U1NUSp0aACYGvE&quot;&gt;Drupalcon&lt;/a&gt;
(and &lt;a href=&quot;https://www.youtube.com/channel/UCb9XEo_1SDNR8Ucpbktrg5A&quot;&gt;Laracon&lt;/a&gt;) on
YouTube. There’s some great stuff. Like this talk from Ryan Weaver about
&lt;a href=&quot;https://www.youtube.com/watch?v=iQL1joxljho&quot;&gt;Symfony&lt;/a&gt; and
this talk by Ross Tuck about &lt;a href=&quot;https://www.youtube.com/watch?v=ajhqScWECMo&quot;&gt;Models and Service Layers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;###2. Do PHP the right way.&lt;/p&gt;

&lt;p&gt;PHP has changed. There’s a lot of outdated information and a lot of legacy code.
Drupal 8 has been rewritten to remove this legacy code, but there’s still a
lot of bad advice on how to write PHP out there.
Read &lt;a href=&quot;http://www.phptherightway.com/&quot;&gt;PHP The Right Way&lt;/a&gt; for a full guide on
how modern PHP should be crafted.&lt;/p&gt;

&lt;p&gt;###3. Use Composer, use and create PHP packages.&lt;/p&gt;

&lt;p&gt;Getting off the island, and embracing the wider PHP ecosystem means using
Composer, and it’s ecosystem of PHP packages. There are many more packages that
are potentially compatible with Drupal, and by architecting your Drupal
extensions as more general PHP packages you have access to a much wider
pool of potential collaborators.&lt;/p&gt;

&lt;p&gt;Creating PHP packages also forces you to write clean code, think like a
software engineer, and write more maintainable, extensible, and reusable code.
Check out &lt;a href=&quot;http://thephpleague.com/&quot;&gt;The PHP League&lt;/a&gt; as examples of solid
PHP packages. They have a good &lt;a href=&quot;https://github.com/thephpleague/skeleton&quot;&gt;Skeleton&lt;/a&gt;
starting package.&lt;/p&gt;

&lt;p&gt;You may have made custom Drupal modules before. Try thinking about how you
can refactor these into separate packages, and using the Drupal “module”
as a small layer that integrates your logic with Drupal.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29&quot;&gt;SOLID&lt;/a&gt;
principles will guide you towards creating good packages.&lt;/p&gt;

&lt;p&gt;###4. Use an IDE&lt;/p&gt;

&lt;p&gt;This was a big one for me. I was always against using an IDE, burnt by early
experiences with open-source IDEs. I settled on a customised Sublime Text
setup, and various other apps. I didn’t see much benefit over using one app
for everything when I could combine a selection of my favorite apps to do
the same thing.&lt;/p&gt;

&lt;p&gt;I’m not sure why I stuck to this. I also do a lot of C++ programming. I have
my own programming language (&lt;a href=&quot;http://cyrilcode.com&quot;&gt;Cyril&lt;/a&gt;) for creating
audio-reactive visuals. I use XCode for C++ as the debugging tools are
essential when you’re dealing with object graphs, memory management, and
debugging pointer issues. So, why not use an IDE for my web development?&lt;/p&gt;

&lt;p&gt;I tried &lt;a href=&quot;https://www.jetbrains.com/phpstorm/&quot;&gt;PHPStorm&lt;/a&gt; and it’s great.
Far from the cumbersome experience I had in the early days with open-source
IDEs, it offers a smooth, fast, integrated experience.&lt;/p&gt;

&lt;p&gt;I think you can get away without an IDE when you’re hacking on Drupal 7, but
on an OO system like Drupal 8 you will need an IDE.
You will need the integrated tooling, testing, and you’ll be much more efficient
with intelligent autocompletion, hinting, quick access to docs, and fast
navigation of the huge codebase.&lt;/p&gt;

&lt;p&gt;###5. Identify your values and serve your purpose.&lt;/p&gt;

&lt;p&gt;As the corporates, enterprises, and big businesses take over, it’s important to
remain true to your yourself.
By &lt;a href=&quot;https://www.mindtools.com/pages/article/newTED_85.htm&quot;&gt;identifying your values&lt;/a&gt;
you will be well placed to notice when they are being compromised.&lt;/p&gt;

&lt;p&gt;You probably got into open-source because you believe in
the power of collaboration. But, this value of collaboration can often be at odds
with the cut-throat corporate culture of competition.&lt;/p&gt;

&lt;p&gt;To be aware of this is to be aware of the opportunity to spread openness and
collaboration with our work.&lt;/p&gt;

&lt;p&gt;As the proceeds of Drupal’s success flow into the community, it’s important to
use this to do good. To continue to serve our communities and society as a whole.
To enable collaboration, share our work, and use openness to build the world we want.&lt;/p&gt;

&lt;p&gt;##Final thoughts&lt;/p&gt;

&lt;p&gt;The real opportunity, is to spread Drupal’s values of cooperation to the wider
population.&lt;/p&gt;

&lt;p&gt;This is part of a bigger shift in society to adopt open-source values, principles,
and methodologies. Chris Anderson says it best:&lt;/p&gt;

&lt;blockquote&gt;
If the past ten years have been about discovering new social and innovation models
on the Web, then the next ten years will be about applying them to the real world.&lt;br /&gt;
-- Chris Anderson
&lt;/blockquote&gt;

&lt;p&gt;The &lt;a href=&quot;http://blog.workopen.org/manifesto/&quot;&gt;Work Open Manifesto&lt;/a&gt; offers a useful
formulation of what it means to be open that can apply beyond open source
software: &lt;b&gt;“Think Big, Start Small, Work Open”&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Drupal is great case study for starting small, thinking big, and working openly.&lt;/p&gt;

&lt;p&gt;The Drupal community has always has been
transforming, improving ourselves, improving the product, improving our practises,
and improving our tools.&lt;/p&gt;

&lt;p&gt;Now it’s time to think beyond Drupal, beyond the Drupal community, and to see
Drupal’s values of collaboration, teamwork, and openness spread through the wider
community, society, and the world.&lt;/p&gt;

</description>
        <pubDate>Mon, 16 Nov 2015 00:00:00 +0000</pubDate>
        <link>http://www.darrenmothersele.com//blog/2015/11/16/surviving-open-source-gentrification/</link>
        <guid isPermaLink="true">http://www.darrenmothersele.com//blog/2015/11/16/surviving-open-source-gentrification/</guid>
      </item>
    
      <item>
        <title>Introducing Stylex: Atomic design, style guides, and prototyping with Silex and Twig</title>
        <description>&lt;p&gt;I’ve been working a lot with Atomic design (component-based design)
with Drupal recently, and I’ve witnessed huge improvements on projects
where it has been introduced. The main advantage being the decoupling of
the development of the back-end from the development of the front-end
code.&lt;/p&gt;

&lt;p&gt;I’ve covered this in more detail &lt;a href=&quot;http://www.darrenmothersele.com/blog/2015/03/06/atomic-drupal-workshops/&quot;&gt;previously&lt;/a&gt;, I’m running some workshops on &lt;a href=&quot;http://www.darrenmothersele.com/blog/2015/03/06/atomic-drupal-workshops/&quot;&gt;Atomic Design in Drupal&lt;/a&gt;,
and I have more to say on this in the future. Today I want to tell you about a simple
tool I’m using to speed up the process. &lt;a href=&quot;https://github.com/darrenmothersele/stylex&quot;&gt;Stylex&lt;/a&gt;.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;The main purpose of this tool is to simplify the construction of prototype
sites or style guides for front-end code. There are several tools already available,
including the excellent &lt;a href=&quot;http://patternlab.io/&quot;&gt;Pattern Lab&lt;/a&gt;, but I wanted something
incredibly simple.&lt;/p&gt;

&lt;p&gt;I basically just wanted to make use of the power of Twig templates 
for mocking up front-end code, with an easy way to load in demo content (from
yml files).&lt;/p&gt;

&lt;p&gt;## Barebones project&lt;/p&gt;

&lt;p&gt;I’ve created a &lt;a href=&quot;https://github.com/darrenmothersele/stylex-barebones&quot;&gt;barebones Stylex project&lt;/a&gt; on GitHub that demonstrates this, but you probably 
want to follow along in the setup, so you know what’s going on…&lt;/p&gt;

&lt;h2 id=&quot;basic-setup&quot;&gt;Basic setup&lt;/h2&gt;

&lt;p&gt;I’ve packaged this for Composer so getting started is easy. Assuming you already
have &lt;a href=&quot;https://getcomposer.org/doc/00-intro.md#globally&quot;&gt;Composer installed globally&lt;/a&gt; 
all you need to do is create a folder for your
project and run the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;composer require darrenmothersele/stylex dev-master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will download Stylex from Github and all the dependencies. It creates the 
&lt;code class=&quot;highlighter-rouge&quot;&gt;composer.json&lt;/code&gt; file for you and downloads all the code for the dependencies into
a &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;As a bare minimum you will need to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;index.php&lt;/code&gt; to run the application, and 
a starter template &lt;code class=&quot;highlighter-rouge&quot;&gt;templates/index.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create a file in the project root (same location as the generated &lt;code class=&quot;highlighter-rouge&quot;&gt;composer.json&lt;/code&gt; file)
called &lt;code class=&quot;highlighter-rouge&quot;&gt;index.php&lt;/code&gt; with the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
require_once __DIR__ . '/vendor/autoload.php';

$app = new Stylex\Application();
$app-&amp;gt;run();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then create a &lt;code class=&quot;highlighter-rouge&quot;&gt;templates&lt;/code&gt; folder and create the first page template, &lt;code class=&quot;highlighter-rouge&quot;&gt;templates/index.html&lt;/code&gt; in this folder:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    {% block content %}
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello, world!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    {% endblock %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can run the application with PHP’s build in web server. Simply run the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php -S localhost:8000
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, browse to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8000&lt;/code&gt; to see the website.&lt;/p&gt;

&lt;h2 id=&quot;adding-pages&quot;&gt;Adding pages&lt;/h2&gt;

&lt;p&gt;You can add more pages, and make use of Twig’s awesome template inheritance feature. For example, to create an ‘About us’ page, create a new file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;templates&lt;/code&gt; folder called &lt;code class=&quot;highlighter-rouge&quot;&gt;about.html&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'index.html'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;h&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;About&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;us&amp;lt;/h&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;endblock&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This inherits the whole template from index.html but replaces the &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; block with
a new block of content specific to this page. Browse to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8000/about&lt;/code&gt; to see
the result (make sure PHP’s web server is running - see above).&lt;/p&gt;

&lt;h2 id=&quot;using-data&quot;&gt;Using data&lt;/h2&gt;

&lt;p&gt;You can create YAML data files and then use them in your templates. Create a folder called &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; and then add &lt;code class=&quot;highlighter-rouge&quot;&gt;*.yml&lt;/code&gt; files with your data. In any template these are then available using the filename. For example, to create a data file for your navigation links, create a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;data/main_menu.yml&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- title: Home
  path: /
- title: About Us
  path: /about
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Because the filename is &lt;code class=&quot;highlighter-rouge&quot;&gt;main_menu.yml&lt;/code&gt; this data is now available to read in template files using &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;main_menu&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;. 
Let’s add a component template to style the menu. See my posts on Atomic design in Drupal to find out more about component templates. For now, just create a file in &lt;code class=&quot;highlighter-rouge&quot;&gt;templates/components/menu.html&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  {% for item in main_menu %}
    &amp;lt;li&amp;gt;
      &amp;lt;a href=&quot;{{ item.path }}&quot;&amp;gt;{{ item.title }}&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
  {% endfor %}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now you can include the menu in your page template, by adding the following to your &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'components/menu.html'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;using-sample-content&quot;&gt;Using sample content&lt;/h2&gt;

&lt;p&gt;Stylex supports creating sample content using Markdown format with YAML front matter. This is a simple way to manage blobs of content with associated metadata. By using Markdown and YAML together to create sample content you can keep the sample content out of your front-end mockups and prototypes. This is another useful decoupling that makes life easier.&lt;/p&gt;

&lt;p&gt;In this approach sample content is stored in subfolders under a &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; folder. You can have multiple types of content, and organise them into subfolders under a main &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; folder. Let’s create a first article as an example. First create your &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; and then &lt;code class=&quot;highlighter-rouge&quot;&gt;content/articles&lt;/code&gt; folder, then create a sample file called &lt;code class=&quot;highlighter-rouge&quot;&gt;content/articles/first_post.md&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: My First Post
excerpt: Lorem ipsum dolor sit amet, consectetur adipisicing elit.
image: http://placebee.co.uk/640x480/1
---
Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptas ipsam veritatis officia unde incidunt doloribus veniam eligendi ea maiores delectus excepturi aspernatur illum, voluptates quas odit harum cupiditate cum maxime...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;See the &lt;a href=&quot;https://github.com/darrenmothersele/stylex-barebones&quot;&gt;Stylex Barebones&lt;/a&gt; for the full example, I’ve abbreviated the content here. The main point is to show how you can include YAML metadata above the main Markdown formatted content.&lt;/p&gt;

&lt;p&gt;You can then reference this content from your templates. For example, to print out the title of that first post you created, use the following in your Twig template:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;content.articles.first_post.title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or, more useful, print out the titles of all articles:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;content.articles&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;h&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;post.title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&amp;lt;/h&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;endfor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or, yet even more useful (if you’re building an atomic design), output all the articles using a component template:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;content.articles&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'components/teaser.html'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;endfor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For this to work, create a component template for the &lt;code class=&quot;highlighter-rouge&quot;&gt;teaser&lt;/code&gt; by creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;templates/components/teaser.html&lt;/code&gt; file with the following content:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;teaser&quot;&amp;gt;
  &amp;lt;h2 class=&quot;teaser-title&quot;&amp;gt;
    {{ title }}
  &amp;lt;/h2&amp;gt;
  &amp;lt;img src=&quot;{{ image }}&quot; alt=&quot;&quot; class=&quot;teaser-image&quot;&amp;gt;
  {{ content|raw }}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can create subfolders to organise different types of sample content, for example, add an events folder &lt;code class=&quot;highlighter-rouge&quot;&gt;content/events&lt;/code&gt; and they will be available in your templates as &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;content.events&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;## Debugging&lt;/p&gt;

&lt;p&gt;If you’re getting error messages, you can turn on debugging. In the &lt;code class=&quot;highlighter-rouge&quot;&gt;index.php&lt;/code&gt; file that you created simple add the following line before &lt;code class=&quot;highlighter-rouge&quot;&gt;$app-&amp;gt;run();&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$app['debug'] = TRUE;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This just does the basics to allow you to use Twig templates to quickly build out front-end code. It reads in sample content and data from yml files and allows you to easily combine them with template files to create a prototype site.&lt;/p&gt;

&lt;p&gt;The next step is to reset Drupal’s markup and get it generating the exact same markup. This is covered more in my &lt;a href=&quot;http://www.darrenmothersele.com/blog/2015/03/06/atomic-drupal-workshops/&quot;&gt;Atomic Design in Drupal&lt;/a&gt; workshops.&lt;/p&gt;

&lt;p&gt;You’ll probably want to add your favourite front-end tools into this. In particular, I like to add a Gruntfile to do less/sass compilation, etc.&lt;/p&gt;

&lt;p&gt;Drop me a line if you find this useful, or have any ideas for how it can be improved.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

&lt;p&gt;Darren&lt;/p&gt;

</description>
        <pubDate>Fri, 20 Mar 2015 00:00:00 +0000</pubDate>
        <link>http://www.darrenmothersele.com//blog/2015/03/20/stylex-prototype-style-guide-tool/</link>
        <guid isPermaLink="true">http://www.darrenmothersele.com//blog/2015/03/20/stylex-prototype-style-guide-tool/</guid>
      </item>
    
      <item>
        <title>Atomic Drupal Workshop</title>
        <description>&lt;p&gt;If you’re a frustrated web developer spending more time battling with Drupal than enjoying its benefits then read on, as I’m going to explain how I’ve hacked the Drupal site building process to make it easier and more fun.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;I started exploring this process a couple of years ago. After years of Drupal experience, with it’s ups and downs, something clicked. I thought I was in control before, but there would always be some part of a project where I felt like I was fighting with Drupal. I tried many different approaches, but once I found this methodology there was no looking back.&lt;/p&gt;

&lt;p&gt;I’ve been developing this system for a couple of years, and in recent months I’ve started to see more people talking about it, conference sessions, and blog posts that talk about some of these ideas. None of this is unique, but I have pulled together various elements into a process, or system that anyone can use to simplify their Drupal site building.&lt;/p&gt;

&lt;p&gt;In this article I hope to bring together a few key points that I think make the most difference to the success of a project.&lt;/p&gt;

&lt;p&gt;My work in the past year has taken me into many agencies and I’ve worked with experienced Drupal developers, and with excellent developers but who were new to Drupal. On the one hand I’ve seen Drupal developers artificially constrained to produce “Drupaly” solutions because of perceived limitations of what’s possible with Drupal, and on the other hand I’ve seen developers struggle to get Drupal to do what they want to do.&lt;/p&gt;

&lt;p&gt;##Perhaps you can relate to this story…&lt;/p&gt;

&lt;p&gt;I went into an agency early last year to help with a late running project. There was nothing particularly unique about this website, other than it had some really nice design elements and was a stunning example of responsive design. But, hiding below the surface was a confusing Drupal implementation and a mess of spaghetti code.&lt;/p&gt;

&lt;p&gt;Several developers had worked on the project, and it showed. Competing Drupal modules were being used to achieve the same thing in different parts of the site, the CSS used multiple grid systems, and the general lack of consistency meant the final stages of the project, bug fixing and cross device testing were proving difficult.&lt;/p&gt;

&lt;p&gt;Requirements and designs had changed during the project, and so had the developers, which meant that rather than understand what had been done before, the developers hacked on extra bits of code, put in more and more CSS overrides to target specific elements to tweak the styles.&lt;/p&gt;

&lt;p&gt;The result was a site that was proving impossible to get working across all devices, and as bugs were fixed, more were being introduced and discovered. Slight changes were having unexpected knock on effects across the whole site.&lt;/p&gt;

&lt;p&gt;When I looked at the site, I congratulated them. They had produced a great prototype. They had gone a long way around to get there, but what they had done was understand the problem, and discover exactly what was required in a solution. This resulted in something that worked really well as a prototype. What they hadn’t done was produce a production-ready site.&lt;/p&gt;

&lt;p&gt;I helped them take a few steps back, which at the same time was a huge leap forward. With the knowledge they had gained we could work with Drupal to get the project completed, rather than battling against it.&lt;/p&gt;

&lt;p&gt;##What to learn from this?&lt;/p&gt;

&lt;p&gt;Consistency is important, and prototyping helps to clarify what is required in a solution. Doing all the testing and bug fixing at the end of a project is hard, gets out of control, and causes missed deadlines.&lt;/p&gt;

&lt;p&gt;##Introducing Atomic Drupal&lt;/p&gt;

&lt;p&gt;I’ve been looking at the emerging atomic design movement, component-based design, or style-guide driven development, and I’ve taken best practise from the cutting edge of web design and combined it with over 7 years experience of pushing Drupal to it’s limits and past them.&lt;/p&gt;

&lt;p&gt;Where I’ve ended up is a system for converting ideas into effective websites. A way of working with Drupal rather than against it, with the aim of shifting the focus of a project from development and bug fixing to solving new and interesting problems. Making the basics of site building easy and fun.&lt;/p&gt;

&lt;p&gt;People I’ve introduced to this already have found they can now do more with Drupal and say yes to more of clients requirements, and work on more interesting projects.&lt;/p&gt;

&lt;p&gt;##Atomic Design&lt;/p&gt;

&lt;p&gt;A component-based approach to the front end means creating more maintainable and flexible designs. There are a few tricks to getting this to work in Drupal, but the most important are: taking full control over Drupal’s markup, and planning out a consistent approach to building the site.&lt;/p&gt;

&lt;p&gt;##Prototyping&lt;/p&gt;

&lt;p&gt;An added benefit of taking a component-based approach is the decoupling of front-end design and development from the back-end CMS implementation. The biggest win is that you can build and test all your front-end code separately to the CMS build (you’re not constrained to using Drupal’s markup). This means you can test and validate your front-end code early on in the project, you can test across devices and browsers earlier in the process, and therefore not leave all your big fixing until the end of the project.&lt;/p&gt;

&lt;p&gt;##Workshop&lt;/p&gt;

&lt;p&gt;Get in touch if you’re interested in learning more as I am running workshops on Atomic design with Drupal for agencies and individual developers. Check my training page to see upcoming dates for public courses (at the time of writing the next scheduled public workshop is 24th April).&lt;/p&gt;

&lt;p&gt;This workshop will cover how to take full control over Drupal’s markup, resetting and removing Drupal’s own markup and replacing it with your own. How to work with Atomic design and component based design principles in Drupal. Debunking the most common myths around Drupal front end code, and fixing the single biggest cause for late running projects and missed deadlines.&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;btn btn-primary&quot; href=&quot;https://www.eventbrite.co.uk/e/atomic-drupal-workshop-tickets-16052157435&quot;&gt;Book Ticket&lt;/a&gt; &lt;a class=&quot;btn btn-primary&quot; href=&quot;https://www.eventbrite.co.uk/e/atomic-drupal-workshop-tickets-16052157435&quot;&gt;More info&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 06 Mar 2015 00:00:00 +0000</pubDate>
        <link>http://www.darrenmothersele.com//blog/2015/03/06/atomic-drupal-workshops/</link>
        <guid isPermaLink="true">http://www.darrenmothersele.com//blog/2015/03/06/atomic-drupal-workshops/</guid>
      </item>
    
  </channel>
</rss>
